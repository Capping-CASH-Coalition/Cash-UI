{"version":3,"sources":["webpack:///./src/app/pages/survey/survey.module.ts","webpack:///./src/app/globals.ts","webpack:///./src/app/pipes/filterByQuestionActive.pipe.ts","webpack:///./~/ngx-pagination/dist/ngx-pagination.js","webpack:///./src/app/pages/survey/survey.component.ts","webpack:///./src/app/pages/survey/survey.routes.ts","webpack:///./src/app/pipes/filterByOptionActive.pipe.ts","webpack:///./src/app/pipes/filterQuestionId.pipe.ts","webpack:///./src/app/pipes/filterSurvey.pipe.ts","webpack:///./src/app/pages/survey/survey.component.css","webpack:///./src/app/pages/survey/survey.component.html"],"names":[],"mappings":"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AAC;yBACtI;qBACH;iBACH;aACH;SACH;IACJ,CAAC;IAAD,cAAC;AAAD,CAAC;AAlIY,OAAO;IADnB,wFAAU,EAAE;GACA,OAAO,CAkInB;AAlImB;;;;;;;;;;;;;;;;;ACJgC;AAMpD,IAAa,0BAA0B;IAAvC;IAOA,CAAC;IALG,8CAAS,GAAT,UAAU,SAAe;QACrB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,UAAC,QAAa,IAAK,eAAQ,CAAC,eAAe,KAAK,IAAI,EAAjC,CAAiC,CAAC,CAAC;QAClF,CAAC;IACL,CAAC;IACL,iCAAC;AAAD,CAAC;AAPY,0BAA0B;IAJtC,kFAAI,CAAC;QACH,IAAI,EAAE,iBAAiB;KACzB,CAAC;GAEW,0BAA0B,CAOtC;AAPsC;;;;;;;;;;;;;;;;;;ACNoG;AACpH;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,wBAAwB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,8CAA8C,EAAE;AAC5G;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,+CAA+C;AAC/C,SAAS,2BAA2B;AACpC,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,yvBAAyvB,iBAAiB,+BAA+B,yBAAyB,2FAA2F,iBAAiB,+BAA+B,yBAAyB,mGAAmG,kBAAkB,KAAK,mBAAmB,6XAA6X,yBAAyB,kCAAkC,cAAc,6IAA6I,4BAA4B,kCAAkC,cAAc,wVAAwV,aAAa,+BAA+B,yBAAyB,2FAA2F,aAAa,+BAA+B,yBAAyB;AAC/0E,yCAAyC,mBAAmB,wBAAwB,EAAE,qDAAqD,mBAAmB,qBAAqB,EAAE,4BAA4B,kBAAkB,EAAE,wBAAwB,6BAA6B,gCAAgC,4BAA4B,8BAA8B,uBAAuB,EAAE,wBAAwB,4BAA4B,EAAE,kDAAkD,qBAAqB,sBAAsB,kCAAkC,uBAAuB,EAAE,kEAAkE,4BAA4B,EAAE,8BAA8B,kCAAkC,0BAA0B,qBAAqB,sBAAsB,EAAE,+BAA+B,kCAAkC,qBAAqB,sBAAsB,EAAE,wCAAwC,gCAAgC,EAAE,+CAA+C,sBAAsB,EAAE,4GAA4G,uBAAuB,0BAA0B,yBAAyB,EAAE,kGAAkG,sBAAsB,0BAA0B,wBAAwB,EAAE,kCAAkC,kCAAkC,eAAe,gBAAgB,qBAAqB,2BAA2B,EAAE,iCAAiC,kBAAkB,EAAE,wCAAwC,8CAA8C,4BAA4B,EAAE,uGAAuG,oBAAoB,EAAE,GAAG;;AAEn2D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,8DAA8D,WAAW;AACzE;AACA,gBAAgB,qEAAc;AAC9B,qBAAqB,qEAAc;AACnC,4BAA4B,qEAAc;AAC1C,sBAAsB,qEAAc;AACpC,wBAAwB,qEAAc;AACtC,2BAA2B,qEAAc;AACzC,uBAAuB,qEAAc;AACrC,yCAAyC,qEAAc;AACvD,mCAAmC,qEAAc;AACjD,sCAAsC,qEAAc;AACpD,wBAAwB,sEAAe;AACvaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,8DAA8D;AAC9D,SAAS,2BAA2B;AACpC,SAAS,kFAA2B;AACpC,MAAM;AACN;AACA,gBAAgB,qEAAc;AAC9B,qBAAqB,qEAAc;AACnC,wBAAwB,sEAAe;AACvC;AACA;AAC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","file":"1.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule } from \"@angular/forms\";\nimport {NgxPaginationModule} from 'ngx-pagination';\nimport { SurveyComponent } from \"./survey.component\";\nimport { surveyRoutes } from \"./survey.routes\";\nimport { FilterByQuestionIDPipe } from \"../../pipes/filterQuestionId.pipe\"\nimport { FilterBySurveyIdPipe } from \"../../pipes/filterSurvey.pipe\"\nimport { Globals } from './../../globals';\nimport { FilterByQuestionActivePipe} from '../../pipes/filterByQuestionActive.pipe';\nimport { FilterByOptionActivePipe } from '../../pipes/filterByOptionActive.pipe'\n\n@NgModule({\n  imports: [\n      CommonModule,\n      FormsModule,\n      RouterModule.forChild(surveyRoutes),\n      NgxPaginationModule\n  ],\n  declarations: [\n    SurveyComponent,\n    FilterByQuestionIDPipe,\n    FilterBySurveyIdPipe,\n    FilterByQuestionActivePipe,\n    FilterByOptionActivePipe\n  ],\n  providers:[\n    Globals\n  ]\n})\nexport class SurveyModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pages/survey/survey.module.ts","import { Injectable } from '@angular/core';\nimport { SurveyService } from '../app/survey.service';\n\n@Injectable()\nexport class Globals {\n\n   public surveys: Array<any> = [\n      {\n         survey_id: 0,\n         survey_name: \"Lindas Survey\",\n         date_created: \"2018-02-13\",\n         questions: [\n            {\n               question_id: 0,\n               question_text: \"What is your favorite color?\",\n               question_type: \"dropdown\",\n               question_active: true,\n               options: [\n                  { option_id: 0, option_text: \"Red\", option_active: true },\n                  { option_id: 1, option_text: \"White\", option_active: true },\n                  { option_id: 2, option_text: \"Pink\", option_active: true },\n                  { option_id: 3, option_text: \"Blue\", option_active: true },\n                  { option_id: 4, option_text: \"Yellow\", option_active: false }\n               ],\n               responses: [\n                  { response_id: 0, response_text: \"Red\", date_taken: \"2018-11-02\"},\n                  { response_id: 1, response_text: \"White\", date_taken: \"2018-11-02\"},\n                  { response_id: 2, response_text: \"Pink\", date_taken: \"2018-11-02\"},\n                  { response_id: 3, response_text: \"Blue\", date_taken: \"2018-11-02\"},\n                  { response_id: 4, response_text: \"White\", date_taken: \"2018-11-02\"},\n                  { response_id: 5, response_text: \"White\", date_taken: \"2018-11-02\"},\n                  { response_id: 6, response_text: \"Yellow\", date_taken: \"2018-11-02\"},\n                  { response_id: 7, response_text: \"Blue\", date_taken: \"2018-11-02\"},\n                  { response_id: 8, response_text: \"Pink\", date_taken: \"2018-11-02\"},\n               ]\n            },\n            {\n               question_id: 1,\n               question_text: \"What is your favorite City?\",\n               question_type: \"mc\",\n               question_active: true,\n               options: [\n                  { option_id: 5, option_text: \"New York City\", option_active: true },\n                  { option_id: 6, option_text: \"Boston\", option_active: true },\n                  { option_id: 7, option_text: \"Washington\", option_active: false },\n                  { option_id: 8, option_text: \"Miami\", option_active: true },\n                  { option_id: 9, option_text: \"Poughkeepsie\", option_active: true }\n               ],\n               responses: [\n                  { response_id: 9, response_text: \"New York City\", date_taken: \"2018-11-02\"},\n                  { response_id: 10, response_text: \"Boston\", date_taken: \"2018-11-02\"},\n                  { response_id: 11, response_text: \"New York City\", date_taken: \"2018-11-02\"},\n                  { response_id: 12, response_text: \"Washington\", date_taken: \"2018-11-02\"},\n                  { response_id: 13, response_text: \"Poughkeepsie\", date_taken: \"2018-11-02\"},\n                  { response_id: 14, response_text: \"Poughkeepsie\", date_taken: \"2018-11-02\"},\n                  { response_id: 15, response_text: \"New York City\", date_taken: \"2018-11-02\"},\n                  { response_id: 16, response_text: \"Miami\", date_taken: \"2018-11-02\"},\n                  { response_id: 17, response_text: \"Boston\", date_taken: \"2018-11-02\"},\n               ]\n            },\n            {\n               question_id: 2,\n               question_text: \"Select the services that you need: \",\n               question_type: \"checkboxes\",\n               question_active: true,\n               options: [\n                  { option_id: 10, option_text: \"More Money\", option_active: false },\n                  { option_id: 11, option_text: \"More Time\", option_active: true },\n                  { option_id: 12, option_text: \"More Clothes\", option_active: true },\n                  { option_id: 13, option_text: \"Less capping work\", option_active: true },\n                  { option_id: 14, option_text: \"Less drinking\", option_active: false }\n               ],\n               responses: [\n                  { response_id: 18, response_text: \"More Time\", date_taken: \"2018-11-02\"},\n                  { response_id: 19, response_text: \"More Time\", date_taken: \"2018-11-02\"},\n                  { response_id: 20, response_text: \"More Money\", date_taken: \"2018-11-02\"},\n                  { response_id: 21, response_text: \"Less drinking\", date_taken: \"2018-11-02\"},\n                  { response_id: 22, response_text: \"Less capping work\", date_taken: \"2018-11-02\"},\n                  { response_id: 23, response_text: \"Less capping work\", date_taken: \"2018-11-02\"},\n                  { response_id: 24, response_text: \"More Money\", date_taken: \"2018-11-02\"},\n                  { response_id: 25, response_text: \"More Clothes\", date_taken: \"2018-11-02\"},\n                  { response_id: 26, response_text: \"Less capping work\", date_taken: \"2018-11-02\"},\n               ]\n            }\n         ]\n      },\n      {\n         survey_id: 1,\n         survey_name: \"Algozzines Survey\",\n         date_created: \"11-02-2018\",\n         questions: [\n            {\n               question_id: 3,\n               question_text: \"How much do you love capping? \",\n               question_type: \"dropdown\",\n               question_active: true,\n               options: [\n                  { option_id: 15, option_text: \"Its awesome\", option_active: true },\n                  { option_id: 16, option_text: \"Its cool\", option_active: true },\n                  { option_id: 17, option_text: \"Its miserable\", option_active: true },\n               ],\n               responses: [\n                  { response_id: 26, response_text: \"Its awesome\", date_taken: \"2018-11-02\"},\n                  { response_id: 27, response_text: \"Its cool\", date_taken: \"2018-10-14\"},\n                  { response_id: 28, response_text: \"Its awesome\", date_taken: \"2018-10-12\"},\n                  { response_id: 29, response_text: \"Its cool\", date_taken: \"2018-10-02\"},\n                  { response_id: 30, response_text: \"Its awesome\", date_taken: \"2018-11-17\"},\n                  { response_id: 31, response_text: \"Its miserable\", date_taken: \"2018-10-01\"},\n                  { response_id: 32, response_text: \"Its awesome\", date_taken: \"2018-11-30\"},\n                  { response_id: 33, response_text: \"Its miserable\", date_taken: \"2018-10-22\"},\n                  { response_id: 34, response_text: \"Its miserable\", date_taken: \"2018-11-12\"},\n               ]\n            },\n            {\n               question_id: 4,\n               question_text: \"Please elaborate on the previous answer\",\n               question_type: \"text\",\n               question_active: true,\n               options: [{ option_id: -1, option_text: \"TEXT RESPONSE\", option_active: false },],\n               responses: [\n                  { response_id: 35, response_text: \"I love capping so much,\", date_taken: \"2018-11-02\"},\n                  { response_id: 36, response_text: \"Its ok, could be better\", date_taken: \"2018-11-02\"},\n                  { response_id: 37, response_text: \"I love my capping teacher! Johnson is great!\", date_taken: \"2018-11-02\"},\n                  { response_id: 38, response_text: \"Welp\", date_taken: \"2018-11-02\"},\n                  { response_id: 39, response_text: \"Algozzine for the win!\", date_taken: \"2018-11-02\"},\n                  { response_id: 40, response_text: \"I hate my life\", date_taken: \"2018-11-02\"},\n                  { response_id: 41, response_text: \"This has been an incredible experience\", date_taken: \"2018-11-02\"},\n                  { response_id: 42, response_text: \"I cry myself to sleep everyday\", date_taken: \"2018-11-02\"},\n                  { response_id: 43, response_text: \"I find standing in cold windy rain to be more enjoyable than capping.\", date_taken: \"2018-11-02\"},\n               ]\n            }\n         ]\n      }\n   ]\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/globals.ts","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n   name: 'ActiveQuestions'\n})\n\nexport class FilterByQuestionActivePipe implements PipeTransform {\n\n    transform(questions : any): any[] {\n        if (questions) {\n            return questions.filter((question: any) => question.question_active === true);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/filterByQuestionActive.pipe.ts","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, EventEmitter, Input, NgModule, Output, Pipe, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nvar PaginationService = (function () {\n    function PaginationService() {\n        this.change = new EventEmitter();\n        this.instances = {};\n        this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\n    }\n    PaginationService.prototype.defaultId = function () { return this.DEFAULT_ID; };\n    PaginationService.prototype.register = function (instance) {\n        if (instance.id == null) {\n            instance.id = this.DEFAULT_ID;\n        }\n        if (!this.instances[instance.id]) {\n            this.instances[instance.id] = instance;\n            this.change.emit(instance.id);\n        }\n        else {\n            var changed = this.updateInstance(instance);\n            if (changed) {\n                this.change.emit(instance.id);\n            }\n        }\n    };\n    /**\n     * Check each property of the instance and update any that have changed. Return\n     * true if any changes were made, else return false.\n     */\n    PaginationService.prototype.updateInstance = function (instance) {\n        var changed = false;\n        for (var prop in this.instances[instance.id]) {\n            if (instance[prop] !== this.instances[instance.id][prop]) {\n                this.instances[instance.id][prop] = instance[prop];\n                changed = true;\n            }\n        }\n        return changed;\n    };\n    /**\n     * Returns the current page number.\n     */\n    PaginationService.prototype.getCurrentPage = function (id) {\n        if (this.instances[id]) {\n            return this.instances[id].currentPage;\n        }\n    };\n    /**\n     * Sets the current page number.\n     */\n    PaginationService.prototype.setCurrentPage = function (id, page) {\n        if (this.instances[id]) {\n            var instance = this.instances[id];\n            var maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\n            if (page <= maxPage && 1 <= page) {\n                this.instances[id].currentPage = page;\n                this.change.emit(id);\n            }\n        }\n    };\n    /**\n     * Sets the value of instance.totalItems\n     */\n    PaginationService.prototype.setTotalItems = function (id, totalItems) {\n        if (this.instances[id] && 0 <= totalItems) {\n            this.instances[id].totalItems = totalItems;\n            this.change.emit(id);\n        }\n    };\n    /**\n     * Sets the value of instance.itemsPerPage.\n     */\n    PaginationService.prototype.setItemsPerPage = function (id, itemsPerPage) {\n        if (this.instances[id]) {\n            this.instances[id].itemsPerPage = itemsPerPage;\n            this.change.emit(id);\n        }\n    };\n    /**\n     * Returns a clone of the pagination instance object matching the id. If no\n     * id specified, returns the instance corresponding to the default id.\n     */\n    PaginationService.prototype.getInstance = function (id) {\n        if (id === void 0) { id = this.DEFAULT_ID; }\n        if (this.instances[id]) {\n            return this.clone(this.instances[id]);\n        }\n        return {};\n    };\n    /**\n     * Perform a shallow clone of an object.\n     */\n    PaginationService.prototype.clone = function (obj) {\n        var target = {};\n        for (var i in obj) {\n            if (obj.hasOwnProperty(i)) {\n                target[i] = obj[i];\n            }\n        }\n        return target;\n    };\n    return PaginationService;\n}());\n\nvar LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\nvar PaginatePipe = (function () {\n    function PaginatePipe(service) {\n        this.service = service;\n        // store the values from the last time the pipe was invoked\n        this.state = {};\n    }\n    PaginatePipe.prototype.transform = function (collection, args) {\n        // When an observable is passed through the AsyncPipe, it will output\n        // `null` until the subscription resolves. In this case, we want to\n        // use the cached data from the `state` object to prevent the NgFor\n        // from flashing empty until the real values arrive.\n        if (args instanceof Array) {\n            // compatible with angular2 before beta16\n            args = args[0];\n        }\n        if (!(collection instanceof Array)) {\n            var _id = args.id || this.service.defaultId;\n            if (this.state[_id]) {\n                return this.state[_id].slice;\n            }\n            else {\n                return collection;\n            }\n        }\n        var serverSideMode = args.totalItems && args.totalItems !== collection.length;\n        var instance = this.createInstance(collection, args);\n        var id = instance.id;\n        var start, end;\n        var perPage = instance.itemsPerPage;\n        this.service.register(instance);\n        if (!serverSideMode && collection instanceof Array) {\n            perPage = +perPage || LARGE_NUMBER;\n            start = (instance.currentPage - 1) * perPage;\n            end = start + perPage;\n            var isIdentical = this.stateIsIdentical(id, collection, start, end);\n            if (isIdentical) {\n                return this.state[id].slice;\n            }\n            else {\n                var slice = collection.slice(start, end);\n                this.saveState(id, collection, slice, start, end);\n                this.service.change.emit(id);\n                return slice;\n            }\n        }\n        // save the state for server-side collection to avoid null\n        // flash as new data loads.\n        this.saveState(id, collection, collection, start, end);\n        return collection;\n    };\n    /**\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\n     */\n    PaginatePipe.prototype.createInstance = function (collection, args) {\n        var config = args;\n        this.checkConfig(config);\n        return {\n            id: config.id != null ? config.id : this.service.defaultId(),\n            itemsPerPage: +config.itemsPerPage || 0,\n            currentPage: +config.currentPage || 1,\n            totalItems: +config.totalItems || collection.length\n        };\n    };\n    /**\n     * Ensure the argument passed to the filter contains the required properties.\n     */\n    PaginatePipe.prototype.checkConfig = function (config) {\n        var required = ['itemsPerPage', 'currentPage'];\n        var missing = required.filter(function (prop) { return !(prop in config); });\n        if (0 < missing.length) {\n            throw new Error(\"PaginatePipe: Argument is missing the following required properties: \" + missing.join(', '));\n        }\n    };\n    /**\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\n     * need to check that the collection, start and end points are all identical, and if so, return the\n     * last sliced array.\n     */\n    PaginatePipe.prototype.saveState = function (id, collection, slice, start, end) {\n        this.state[id] = {\n            collection: collection,\n            size: collection.length,\n            slice: slice,\n            start: start,\n            end: end\n        };\n    };\n    /**\n     * For a given id, returns true if the collection, size, start and end values are identical.\n     */\n    PaginatePipe.prototype.stateIsIdentical = function (id, collection, start, end) {\n        var state = this.state[id];\n        if (!state) {\n            return false;\n        }\n        var isMetaDataIdentical = state.size === collection.length &&\n            state.start === start &&\n            state.end === end;\n        if (!isMetaDataIdentical) {\n            return false;\n        }\n        return state.slice.every(function (element, index) { return element === collection[start + index]; });\n    };\n    PaginatePipe.decorators = [\n        { type: Pipe, args: [{\n                    name: 'paginate',\n                    pure: false\n                },] },\n    ];\n    /** @nocollapse */\n    PaginatePipe.ctorParameters = function () { return [\n        { type: PaginationService, },\n    ]; };\n    return PaginatePipe;\n}());\n\n/**\n * The default template and styles for the pagination links are borrowed directly\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\n */\nvar DEFAULT_TEMPLATE = \"\\n    <pagination-template  #p=\\\"paginationApi\\\"\\n                         [id]=\\\"id\\\"\\n                         [maxSize]=\\\"maxSize\\\"\\n                         (pageChange)=\\\"pageChange.emit($event)\\\">\\n    <ul class=\\\"ngx-pagination\\\" \\n        role=\\\"navigation\\\" \\n        [attr.aria-label]=\\\"screenReaderPaginationLabel\\\" \\n        [class.responsive]=\\\"responsive\\\"\\n        *ngIf=\\\"!(autoHide && p.pages.length <= 1)\\\">\\n\\n        <li class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\" *ngIf=\\\"directionLinks\\\"> \\n            <a tabindex=\\\"0\\\" *ngIf=\\\"1 < p.getCurrent()\\\" (keyup.enter)=\\\"p.previous()\\\" (click)=\\\"p.previous()\\\" [attr.aria-label]=\\\"previousLabel + ' ' + screenReaderPageLabel\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isFirstPage()\\\">\\n                {{ previousLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li> \\n\\n        <li class=\\\"small-screen\\\">\\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\\n        </li>\\n\\n        <li [class.current]=\\\"p.getCurrent() === page.value\\\" \\n            [class.ellipsis]=\\\"page.label === '...'\\\"\\n            *ngFor=\\\"let page of p.pages\\\">\\n            <a tabindex=\\\"0\\\" (keyup.enter)=\\\"p.setCurrent(page.value)\\\" (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }} </span>\\n                <span>{{ page.label }}</span>\\n            </a>\\n            <ng-container *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                <span class=\\\"show-for-sr\\\">{{ screenReaderCurrentLabel }} </span>\\n                <span>{{ page.label }}</span> \\n            </ng-container>\\n        </li>\\n\\n        <li class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\" *ngIf=\\\"directionLinks\\\">\\n            <a tabindex=\\\"0\\\" *ngIf=\\\"!p.isLastPage()\\\" (keyup.enter)=\\\"p.next()\\\" (click)=\\\"p.next()\\\" [attr.aria-label]=\\\"nextLabel + ' ' + screenReaderPageLabel\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </a>\\n            <span *ngIf=\\\"p.isLastPage()\\\">\\n                 {{ nextLabel }} <span class=\\\"show-for-sr\\\">{{ screenReaderPageLabel }}</span>\\n            </span>\\n        </li>\\n\\n    </ul>\\n    </pagination-template>\\n    \";\nvar DEFAULT_STYLES = \"\\n.ngx-pagination {\\n  margin-left: 0;\\n  margin-bottom: 1rem; }\\n  .ngx-pagination::before, .ngx-pagination::after {\\n    content: ' ';\\n    display: table; }\\n  .ngx-pagination::after {\\n    clear: both; }\\n  .ngx-pagination li {\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    -ms-user-select: none;\\n    margin-right: 0.0625rem;\\n    border-radius: 0; }\\n  .ngx-pagination li {\\n    display: inline-block; }\\n  .ngx-pagination a,\\n  .ngx-pagination button {\\n    color: #0a0a0a; \\n    display: block;\\n    padding: 0.1875rem 0.625rem;\\n    border-radius: 0; }\\n    .ngx-pagination a:hover,\\n    .ngx-pagination button:hover {\\n      background: #e6e6e6; }\\n  .ngx-pagination .current {\\n    padding: 0.1875rem 0.625rem;\\n    background: #2199e8;\\n    color: #fefefe;\\n    cursor: default; }\\n  .ngx-pagination .disabled {\\n    padding: 0.1875rem 0.625rem;\\n    color: #cacaca;\\n    cursor: default; } \\n    .ngx-pagination .disabled:hover {\\n      background: transparent; }\\n  .ngx-pagination a, .ngx-pagination button {\\n    cursor: pointer; }\\n\\n.ngx-pagination .pagination-previous a::before,\\n.ngx-pagination .pagination-previous.disabled::before { \\n  content: '\\u00AB';\\n  display: inline-block;\\n  margin-right: 0.5rem; }\\n\\n.ngx-pagination .pagination-next a::after,\\n.ngx-pagination .pagination-next.disabled::after {\\n  content: '\\u00BB';\\n  display: inline-block;\\n  margin-left: 0.5rem; }\\n\\n.ngx-pagination .show-for-sr {\\n  position: absolute !important;\\n  width: 1px;\\n  height: 1px;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0); }\\n.ngx-pagination .small-screen {\\n  display: none; }\\n@media screen and (max-width: 601px) {\\n  .ngx-pagination.responsive .small-screen {\\n    display: inline-block; } \\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\\n    display: none; }\\n}\\n  \";\n\nfunction coerceToBoolean(input) {\n    return !!input && input !== 'false';\n}\n/**\n * The default pagination controls component. Actually just a default implementation of a custom template.\n */\nvar PaginationControlsComponent = (function () {\n    function PaginationControlsComponent() {\n        this.maxSize = 7;\n        this.previousLabel = 'Previous';\n        this.nextLabel = 'Next';\n        this.screenReaderPaginationLabel = 'Pagination';\n        this.screenReaderPageLabel = 'page';\n        this.screenReaderCurrentLabel = \"You're on page\";\n        this.pageChange = new EventEmitter();\n        this._directionLinks = true;\n        this._autoHide = false;\n        this._responsive = false;\n    }\n    Object.defineProperty(PaginationControlsComponent.prototype, \"directionLinks\", {\n        get: function () {\n            return this._directionLinks;\n        },\n        set: function (value) {\n            this._directionLinks = coerceToBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PaginationControlsComponent.prototype, \"autoHide\", {\n        get: function () {\n            return this._autoHide;\n        },\n        set: function (value) {\n            this._autoHide = coerceToBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PaginationControlsComponent.prototype, \"responsive\", {\n        get: function () {\n            return this._responsive;\n        },\n        set: function (value) {\n            this._responsive = coerceToBoolean(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    PaginationControlsComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'pagination-controls',\n                    template: DEFAULT_TEMPLATE,\n                    styles: [DEFAULT_STYLES],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None\n                },] },\n    ];\n    /** @nocollapse */\n    PaginationControlsComponent.ctorParameters = function () { return []; };\n    PaginationControlsComponent.propDecorators = {\n        'id': [{ type: Input },],\n        'maxSize': [{ type: Input },],\n        'directionLinks': [{ type: Input },],\n        'autoHide': [{ type: Input },],\n        'responsive': [{ type: Input },],\n        'previousLabel': [{ type: Input },],\n        'nextLabel': [{ type: Input },],\n        'screenReaderPaginationLabel': [{ type: Input },],\n        'screenReaderPageLabel': [{ type: Input },],\n        'screenReaderCurrentLabel': [{ type: Input },],\n        'pageChange': [{ type: Output },],\n    };\n    return PaginationControlsComponent;\n}());\n\n/**\n * This directive is what powers all pagination controls components, including the default one.\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\n * with the pagination controls.\n */\nvar PaginationControlsDirective = (function () {\n    function PaginationControlsDirective(service, changeDetectorRef) {\n        var _this = this;\n        this.service = service;\n        this.changeDetectorRef = changeDetectorRef;\n        this.maxSize = 7;\n        this.pageChange = new EventEmitter();\n        this.pages = [];\n        this.changeSub = this.service.change\n            .subscribe(function (id) {\n            if (_this.id === id) {\n                _this.updatePageLinks();\n                _this.changeDetectorRef.markForCheck();\n                _this.changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    PaginationControlsDirective.prototype.ngOnInit = function () {\n        if (this.id === undefined) {\n            this.id = this.service.defaultId();\n        }\n        this.updatePageLinks();\n    };\n    PaginationControlsDirective.prototype.ngOnChanges = function (changes) {\n        this.updatePageLinks();\n    };\n    PaginationControlsDirective.prototype.ngOnDestroy = function () {\n        this.changeSub.unsubscribe();\n    };\n    /**\n     * Go to the previous page\n     */\n    PaginationControlsDirective.prototype.previous = function () {\n        this.checkValidId();\n        this.setCurrent(this.getCurrent() - 1);\n    };\n    /**\n     * Go to the next page\n     */\n    PaginationControlsDirective.prototype.next = function () {\n        this.checkValidId();\n        this.setCurrent(this.getCurrent() + 1);\n    };\n    /**\n     * Returns true if current page is first page\n     */\n    PaginationControlsDirective.prototype.isFirstPage = function () {\n        return this.getCurrent() === 1;\n    };\n    /**\n     * Returns true if current page is last page\n     */\n    PaginationControlsDirective.prototype.isLastPage = function () {\n        return this.getLastPage() === this.getCurrent();\n    };\n    /**\n     * Set the current page number.\n     */\n    PaginationControlsDirective.prototype.setCurrent = function (page) {\n        this.pageChange.emit(page);\n    };\n    /**\n     * Get the current page number.\n     */\n    PaginationControlsDirective.prototype.getCurrent = function () {\n        return this.service.getCurrentPage(this.id);\n    };\n    /**\n     * Returns the last page number\n     */\n    PaginationControlsDirective.prototype.getLastPage = function () {\n        var inst = this.service.getInstance(this.id);\n        if (inst.totalItems < 1) {\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\n            // but it makes sense to consider a single, empty page as the last page.\n            return 1;\n        }\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\n    };\n    PaginationControlsDirective.prototype.getTotalItems = function () {\n        return this.service.getInstance(this.id).totalItems;\n    };\n    PaginationControlsDirective.prototype.checkValidId = function () {\n        if (this.service.getInstance(this.id).id == null) {\n            console.warn(\"PaginationControlsDirective: the specified id \\\"\" + this.id + \"\\\" does not match any registered PaginationInstance\");\n        }\n    };\n    /**\n     * Updates the page links and checks that the current page is valid. Should run whenever the\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\n     * input values changes.\n     */\n    PaginationControlsDirective.prototype.updatePageLinks = function () {\n        var _this = this;\n        var inst = this.service.getInstance(this.id);\n        var correctedCurrentPage = this.outOfBoundCorrection(inst);\n        if (correctedCurrentPage !== inst.currentPage) {\n            setTimeout(function () {\n                _this.setCurrent(correctedCurrentPage);\n                _this.pages = _this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, _this.maxSize);\n            });\n        }\n        else {\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\n        }\n    };\n    /**\n     * Checks that the instance.currentPage property is within bounds for the current page range.\n     * If not, return a correct value for currentPage, or the current value if OK.\n     */\n    PaginationControlsDirective.prototype.outOfBoundCorrection = function (instance) {\n        var totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n        if (totalPages < instance.currentPage && 0 < totalPages) {\n            return totalPages;\n        }\n        else if (instance.currentPage < 1) {\n            return 1;\n        }\n        return instance.currentPage;\n    };\n    /**\n     * Returns an array of Page objects to use in the pagination controls.\n     */\n    PaginationControlsDirective.prototype.createPageArray = function (currentPage, itemsPerPage, totalItems, paginationRange) {\n        // paginationRange could be a string if passed from attribute, so cast to number.\n        paginationRange = +paginationRange;\n        var pages = [];\n        var totalPages = Math.ceil(totalItems / itemsPerPage);\n        var halfWay = Math.ceil(paginationRange / 2);\n        var isStart = currentPage <= halfWay;\n        var isEnd = totalPages - halfWay < currentPage;\n        var isMiddle = !isStart && !isEnd;\n        var ellipsesNeeded = paginationRange < totalPages;\n        var i = 1;\n        while (i <= totalPages && i <= paginationRange) {\n            var label = void 0;\n            var pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\n            var openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\n            var closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\n                label = '...';\n            }\n            else {\n                label = pageNumber;\n            }\n            pages.push({\n                label: label,\n                value: pageNumber\n            });\n            i++;\n        }\n        return pages;\n    };\n    /**\n     * Given the position in the sequence of pagination links [i],\n     * figure out what page number corresponds to that position.\n     */\n    PaginationControlsDirective.prototype.calculatePageNumber = function (i, currentPage, paginationRange, totalPages) {\n        var halfWay = Math.ceil(paginationRange / 2);\n        if (i === paginationRange) {\n            return totalPages;\n        }\n        else if (i === 1) {\n            return i;\n        }\n        else if (paginationRange < totalPages) {\n            if (totalPages - halfWay < currentPage) {\n                return totalPages - paginationRange + i;\n            }\n            else if (halfWay < currentPage) {\n                return currentPage - halfWay + i;\n            }\n            else {\n                return i;\n            }\n        }\n        else {\n            return i;\n        }\n    };\n    PaginationControlsDirective.decorators = [\n        { type: Directive, args: [{\n                    selector: 'pagination-template,[pagination-template]',\n                    exportAs: 'paginationApi'\n                },] },\n    ];\n    /** @nocollapse */\n    PaginationControlsDirective.ctorParameters = function () { return [\n        { type: PaginationService, },\n        { type: ChangeDetectorRef, },\n    ]; };\n    PaginationControlsDirective.propDecorators = {\n        'id': [{ type: Input },],\n        'maxSize': [{ type: Input },],\n        'pageChange': [{ type: Output },],\n    };\n    return PaginationControlsDirective;\n}());\n\nvar NgxPaginationModule = (function () {\n    function NgxPaginationModule() {\n    }\n    NgxPaginationModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule],\n                    declarations: [\n                        PaginatePipe,\n                        PaginationControlsComponent,\n                        PaginationControlsDirective\n                    ],\n                    providers: [PaginationService],\n                    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\n                },] },\n    ];\n    /** @nocollapse */\n    NgxPaginationModule.ctorParameters = function () { return []; };\n    return NgxPaginationModule;\n}());\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_STYLES as ɵb, DEFAULT_TEMPLATE as ɵa, NgxPaginationModule, PaginationService, PaginationControlsComponent, PaginationControlsDirective, PaginatePipe };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/ngx-pagination/dist/ngx-pagination.js\n// module id = 258\n// module chunks = 1 3","import { Globals } from './../../globals';\nimport { Component, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { PaginationInstance } from 'ngx-pagination';\nimport { SurveyService } from '../../survey.service';\n\n@Component({\n  selector: 'app-survey',\n  templateUrl: './survey.component.html',\n  styleUrls: ['./survey.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class SurveyComponent {\n  \n  constructor(private globals: Globals, private surveyService: SurveyService) { }\n\n  // Pagination element uses this\n  public config: PaginationInstance = {\n    id: 'custom',\n    itemsPerPage: 1,\n    currentPage: 1\n  };\n\n  // Hardcoded for now\n  currentSurveyId = this.globals.surveys[0].survey_id;\n  currentSurveyIndex = this.globals.surveys[0];\n\n  selectedOption: number;\n  radioChoices: Array<any> = [];\n  surveyData: Array<any> = [];\n  radioResponses: Array<any> = [];\n\n  ngOnInit() {\n  }\n\n  // When submit button is hit, this will post the survey data to the database\n  postOnSubmit() {\n    // For each response in surveyData, post the surveyData[index] response object\n    for (let i = 0; i < this.surveyData.length; i++) {\n      this.surveyService.postSurveyResponse(this.surveyData[i]);\n    }\n    console.log(\"popop\");\n  }\n\n  // When next button is clicked, save the selected options to the survey data object\n  updateResponses(event, textValue: string, questionIndex: number, page: number) {\n \n    // Response object mirrors the database response table\n    let response = {survey_id: 0,\n                    question_id: 0,\n                    option_id: 0,\n                    response_text: \"\"};\n    \n    // If question type is dropdown or multiple choice, only need to add 1 response\n    if (this.currentSurveyIndex.questions[questionIndex].question_type == \"dropdown\" ||\n        this.currentSurveyIndex.questions[questionIndex].question_type == \"mc\") {\n          response.survey_id = this.currentSurveyId; // Survey ID\n          response.question_id = this.currentSurveyIndex.questions[questionIndex].question_id; // Question ID\n          response.option_id = this.selectedOption; // Option ID\n          response.response_text = this.getResponseText(this.selectedOption, questionIndex); // Response text\n          // Push to survey data array\n          this.surveyData.push(response);\n    // If question type is checkbox, check for multiple responses\n    } else if (this.currentSurveyIndex.questions[questionIndex].question_type == \"checkboxes\") {\n      // Iterate through the options that were selected\n      for (let option of this.radioChoices) {\n        response.survey_id = this.currentSurveyId; // Survey ID\n        response.question_id = this.currentSurveyIndex.questions[questionIndex].question_id; // Question ID\n        response.option_id = option; // Option ID\n        response.response_text = this.getResponseText(option, questionIndex); // Response text\n\n        console.log(option);\n        // Push to survey data array\n        this.surveyData.push(response);\n      }\n      // Empty the radioChoices array\n      this.radioChoices = [];\n    // If question type is text (open-ended), set option id to 1\n    } else if (this.currentSurveyIndex.questions[questionIndex].question_type == \"text\") {\n      response.survey_id = this.currentSurveyId; // Survey ID\n      response.question_id = this.currentSurveyIndex.questions[questionIndex].question_id; // Question ID\n      response.option_id = 1; // Option ID\n      response.response_text = textValue; // Response text\n\n      console.log(textValue);\n      this.surveyData.push(response);\n    }\n\n    console.log(this.surveyData);\n  }\n\n  // This is called to find the selected options within the HTML\n  setSelectedOption(event, value, questionType): void {\n    // If question type is dropdown or multiple choice, there is only 1 selected value\n    if (questionType == \"dd\" || questionType == \"mc\") {\n      console.log(\"Selected: \" + value);\n      this.selectedOption = value;\n    // If question type is checkbox, there is 1+ options\n    } else if (questionType == \"cb\") {\n      console.log(\"Selected: \" + value);\n      // event is the clicked HTML element\n      if (event) {\n        // If checked, add it to the radioChoice array\n        if (event.target.checked) {\n          this.radioChoices.push(value);\n          console.log(this.radioChoices);\n        // If unchecked, remove it from the radioChoice array\n        } else {\n          console.log(\"unchecked\");\n          // Iterate through the radio choices to see which matches the value\n          for (let i = 0; i < this.radioChoices.length; i++) {\n            console.log(this.radioChoices[i]);\n            // If it matches, remove it from radioChoice array\n            if (this.radioChoices[i] == value) {\n              this.radioChoices.splice(i, 1);\n            }\n          }\n          console.log(this.radioChoices);\n        }\n      }\n    }\n  }\n\n  getResponseText(optionId, questionIndex) {\n    // Iterate through the question's options\n    for (let option of this.currentSurveyIndex.questions[questionIndex].options) {\n      if (this.selectedOption == option.option_id) {\n        return option.option_text;\n      } else if (optionId == option.option_id)\n        return option.option_text;\n    }\n  }\n\n  // Gets called\n  getQuestionIndex(questionId) {\n    for (let i = 0; i < this.currentSurveyIndex.questions.length; i++) {\n      if (questionId == this.currentSurveyIndex.questions[i].question_id) {\n        return i;\n      }\n    };\n  }\n\n  // Gets called when previous button is clicked\n  removeResponse() {\n    this.surveyData.pop();\n    console.log(this.surveyData);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pages/survey/survey.component.ts","import { SurveyComponent } from \"./survey.component\";\n\nexport const surveyRoutes=[\n    {\n        path:'',\n        component:SurveyComponent\n    },\n];\n\n\n// WEBPACK FOOTER //\n// ./src/app/pages/survey/survey.routes.ts","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n   name: 'ActiveOptions'\n})\n\nexport class FilterByOptionActivePipe implements PipeTransform {\n\n    transform(options : any): any[] {\n        if (options) {\n            return options.filter((option: any) => option.option_active === true);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/filterByOptionActive.pipe.ts","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n   name: 'filterByQuestionID'\n})\n\nexport class FilterByQuestionIDPipe implements PipeTransform {\n\n    transform(options : any, questionID: string): any[] {\n        if (options) {\n            return options.filter((option: any) => option.question_id == questionID);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/filterQuestionId.pipe.ts","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n   name: 'filterBySurveyID'\n})\n\nexport class FilterBySurveyIdPipe implements PipeTransform {\n\n    transform(surveys : any, surveyID: string): any[] {\n        if (surveys) {\n            return surveys.filter((survey: any) => survey.survey_id == surveyID);\n        }\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/filterSurvey.pipe.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".header {\\n    color: #36A0FF;\\n    font-size: 27px;\\n    padding: 10px;\\n}\\n.pages{\\n    margin-left:290px;\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/survey/survey.component.css\n// module id = 449\n// module chunks = 1","module.exports = \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-10\\\">\\n      <div class=\\\"well well-sm\\\">\\n\\n        <div *ngFor=\\\"let survey of globals.surveys | filterBySurveyID: currentSurveyId; let j = index\\\">\\n\\n          <div *ngFor=\\\"let question of survey.questions | paginate: config\\\">\\n\\n            <form action=\\\"surveyEnd.component.html\\\">\\n              <fieldset>\\n                <div class=\\\"row\\\">\\n\\n                  <legend class=\\\"text-center header\\\">Dutchess CAP Survey</legend>\\n                  <div class=\\\"col-lg-6\\\" style=\\\"text-align: center; margin-left: 220px;\\\">\\n                    <!--<div *ngFor=\\\"let survey of globals.surveys | filterBySurveyID: currentSurveyId\\\">-->\\n\\n                    <h3> {{ question.question_id + 1 }}. {{ question.question_text}} </h3>\\n\\n                    <div [ngSwitch]=\\\"question.question_type\\\" style=\\\"height:100px\\\">\\n\\n                      <div *ngSwitchCase=\\\"'dropdown'\\\">\\n                        <select class=\\\"form-control\\\" id=\\\"select\\\" [(ngModel)]=\\\"selectedOptionId\\\" name=\\\"selectedOption\\\"\\n                          (change)=\\\"setSelectedOption($event, $event.target.value, 'dd')\\\">\\n                          <option disabled selected>-Please Select an Option-</option>\\n                          <option *ngFor=\\\"let option of question.options\\\" value=\\\"{{option.option_id}}\\\">\\n                            {{ option.option_text }}\\n                          </option>\\n                        </select>\\n                      </div>\\n\\n                      <div *ngSwitchCase=\\\"'checkboxes'\\\">\\n                        <div *ngFor=\\\"let option of question.options\\\" id=\\\"divCheckboxOptionText\\\" (change)=\\\"setSelectedOption($event, $event.target.value, 'cb')\\\">\\n                          <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" value=\\\"{{option.option_id}}\\\">\\n                          {{ option.option_text }}\\n                        </div>\\n                      </div>\\n\\n                      <div *ngSwitchCase=\\\"'text'\\\">\\n                        <div class=\\\"form-check-label\\\">\\n                          <textarea class=\\\"form-control\\\" name=\\\"text\\\" rows=\\\"2\\\" [(ngModel)]=\\\"textAreaValue\\\"></textarea>\\n                        </div>\\n                      </div>\\n\\n                      <div *ngSwitchCase=\\\"'mc'\\\">\\n                        <div *ngFor=\\\"let option of question.options\\\" id=\\\"radioBoxOptionText\\\" (change)=\\\"setSelectedOption($event, $event.target.value, 'mc')\\\">\\n                          <input type=\\\"radio\\\" class=\\\"form-check-input\\\" name=\\\"question.question_id\\\" value=\\\"{{option.option_id}}\\\">\\n                          {{ option.option_text }}\\n                        </div>\\n                      </div>\\n\\n                    </div>\\n                  </div>\\n                </div>\\n                <pagination-template #p=\\\"paginationApi\\\" [id]=\\\"config.id\\\" (pageChange)=\\\"config.currentPage = $event\\\">\\n                  <div class=\\\"custom-pagination\\\">\\n                    <div class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\">\\n                      <a *ngIf=\\\"!p.isFirstPage()\\\" (click)=\\\"removeResponse(); p.previous();\\\"> Previous </a>\\n                    </div>\\n\\n                    <div *ngFor=\\\"let page of p.pages\\\" [class.current]=\\\"p.getCurrent() === page.value\\\">\\n                      <a (click)=\\\"p.setCurrent(page.value)\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\n                        <span>{{ page.label }}</span>\\n                      </a>\\n                      <div *ngIf=\\\"p.getCurrent() === page.value\\\">\\n                        <span>{{ page.label }}</span>\\n                      </div>\\n                    </div>\\n\\n                    <div class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\">\\n                      <a *ngIf=\\\"!p.isLastPage()\\\" (click)=\\\"updateResponses($event, textAreaValue, getQuestionIndex(question.question_id), p); p.next()\\\"> Next </a>\\n                      <a *ngIf=\\\"p.isLastPage()\\\" (click)=\\\"updateResponses($event, textAreaValue, getQuestionIndex(question.question_id), p); postOnSubmit();\\\"> Submit </a>\\n                    </div>\\n                  </div>\\n                </pagination-template>\\n\\n              </fieldset>\\n            </form>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/survey/survey.component.html\n// module id = 456\n// module chunks = 1"],"sourceRoot":""}