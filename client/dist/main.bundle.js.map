{"version":3,"sources":["webpack:///./src/app/services/graph.service.ts","webpack:///./src/app/pages/edit/edit.component.ts","webpack:///./src/app/pages/exportRaw/exportRaw.component.ts","webpack:///./src/app/pages/graphs/graphs.component.ts","webpack:///./src/app/pages/home/home.component.ts","webpack:///./src/app/pages/input/input.component.ts","webpack:///./src/app/pages/not-found/not-found.component.ts","webpack:///./src/app/pages/survey/survey.component.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.helpers.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/components/navigation/navigation.component.ts","webpack:///./src/app/components/topnavbar/topnavbar.component.ts","webpack:///./src/app/pipes/exceptQuestionId.pipe.ts","webpack:///./src/app/pipes/filter.pipe.ts","webpack:///./src/app/pipes/filterByDate.pipe.ts","webpack:///./src/app/pipes/filterByOptionActive.pipe.ts","webpack:///./src/app/pipes/filterByQuestionActive.pipe.ts","webpack:///./src/app/pipes/filterQuestionId.pipe.ts","webpack:///./src/app/pipes/filterSurvey.pipe.ts","webpack:///./src/app/pipes/graphableQuestion.pipe.ts","webpack:///./src/app/pipes/keys.pipe.ts","webpack:///./src/app/services/auth-guard.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/app/services/survey.service.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/components/navigation/navigation.component.css","webpack:///./src/app/components/topnavbar/topnavbar.component.css","webpack:///./src/app/pages/edit/edit.component.css","webpack:///./src/app/pages/exportRaw/exportRaw.component.css","webpack:///./src/app/pages/graphs/graphs.component.css","webpack:///./src/app/pages/home/home.component.css","webpack:///./src/app/pages/input/input.component.css","webpack:///./src/app/pages/not-found/not-found.component.css","webpack:///./src/app/pages/survey/survey.component.css","webpack:///./~/moment/locale ^\\.\\/.*$","webpack:///./src/app/app.component.html","webpack:///./src/app/components/navigation/navigation.component.html","webpack:///./src/app/components/topnavbar/topnavbar.component.html","webpack:///./src/app/pages/edit/edit.component.html","webpack:///./src/app/pages/exportRaw/exportRaw.component.html","webpack:///./src/app/pages/graphs/graphs.component.html","webpack:///./src/app/pages/home/home.component.html","webpack:///./src/app/pages/input/input.component.html","webpack:///./src/app/pages/not-found/not-found.component.html","webpack:///./src/app/pages/survey/survey.component.html","webpack:///./src/app/globals.ts","webpack:///./src/app/services/authentication.service.ts"],"names":[],"mappings":"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B,KAAK,mBAAmB,2BAA2B,eAAe,iBAAiB,wBAAwB,0BAA0B,KAAK;;AAE3vD;;;AAGA;AACA,2C;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","file":"main.bundle.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Chart } from 'chart.js';\r\n\r\n@Injectable()\r\nexport class GraphService {\r\n\r\n    private graphTypes: any[] = [\r\n      {val: 'pie', view: 'Pie' },\r\n      {val: 'bar', view: 'Bar' },\r\n      {val: 'doughnut', view: 'Doughnut' },\r\n      {val: 'polarArea', view: 'Polar Area' },\r\n      {val: 'line', view: 'Line' },\r\n      {val: 'radar', view: 'Radar' },\r\n    ]\r\n\r\n    private colors: string[] = [\r\n      'rgba(054, 162, 235, 1)',\r\n      'rgba(255, 099, 132, 1)',\r\n      'rgba(255, 206, 086, 1)',\r\n      'rgba(075, 192, 192, 1)',\r\n      'rgba(153, 102, 255, 1)',\r\n      'rgba(255, 159, 064, 1)',\r\n      'rgba(046, 139, 087, 1)',\r\n      'rgba(082, 139, 139, 1)',\r\n      'rgba(070, 130, 180, 1)',\r\n      'rgba(147, 112, 219, 1)',\r\n      'rgba(205, 092, 092, 1)',\r\n      'rgba(219, 112, 219, 1)',\r\n      'rgba(255, 231, 186, 1)',\r\n      'rgba(178, 223, 238, 1)',\r\n      'rgba(072, 209, 204, 1)',\r\n      'rgba(238, 180, 180, 1)',\r\n      'rgba(153, 050, 204, 1)',\r\n      'rgba(102, 205, 170, 1)',\r\n      'rgba(230, 238, 000, 1)',\r\n      'rgba(255, 193, 037, 1)',\r\n      'rgba(000, 178, 238, 1)',\r\n      'rgba(255, 159, 064, 1)',\r\n      'rgba(230, 207, 161, 1)',\r\n      'rgba(205, 197, 191, 1)',\r\n      'rgba(202, 255, 112, 1)',\r\n      'rgba(255, 127, 080, 1)',\r\n      'rgba(205, 051, 051, 1)',\r\n      'rgba(255, 127, 000, 1)',\r\n      'rgba(255, 174, 185, 1)'\r\n   ]\r\n\r\n    private linearChartOptions = {\r\n        responsive: false,\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true\r\n                }\r\n            }]\r\n        }\r\n   }\r\n\r\n    private radialChartOptions = {\r\n        responsive: false,\r\n    }\r\n\r\n    public createSingleChart(context, chartType, map: Map<string, number>): Chart {\r\n        return new Chart(context, {\r\n            type: chartType,\r\n            data: {\r\n                labels: Array.from(map.keys()),\r\n                datasets: [{\r\n                    label: 'Total',\r\n                    data: Array.from(map.values()),\r\n                    backgroundColor: this.getColors()\r\n                }]\r\n            },\r\n            options: this.getOptions(chartType)\r\n        });\r\n    }\r\n\r\n    public createMatrixChart(context, chartType, matrixData ): Chart {\r\n        return new Chart(context, {\r\n            type: chartType,\r\n            data: matrixData,\r\n            options: this.getOptions(chartType)\r\n            })\r\n    }\r\n\r\n    public createDateChart(context, chartType, matrixData ): Chart {\r\n        return new Chart(context, {\r\n            type: chartType,\r\n            data: matrixData,\r\n            options: {\r\n                elements: {\r\n                    line: {\r\n                        tension: 0\r\n                    }\r\n                },\r\n                responsive: true,\r\n                title: {\r\n                    display: true,\r\n                    text: \"Responses By Survey For Past Year\"\r\n                },\r\n                scales: {\r\n                    xAxes: [{\r\n                        type: \"time\",\r\n                        time: {\r\n                            tooltipFormat: 'll',\r\n                        },\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'Date'\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        scaleLabel: {\r\n                            display: true,\r\n                            labelString: 'value'\r\n                        }\r\n                    }]\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public getGraphTypes(): any[] {\r\n        return this.graphTypes;\r\n    }\r\n\r\n    public getColors(): string[] {\r\n        return this.colors;\r\n    }\r\n\r\n    public getColorByIndex(i: number): string {\r\n        if ( i > this.colors.length ) {\r\n            console.log(\"color out of bounds\");\r\n            return null;\r\n        } else {\r\n            return this.colors[i];\r\n        }\r\n    }\r\n\r\n    public getOptions(chartType): any {\r\n        if ( chartType == 'bar' || chartType == 'line' )\r\n            return this.linearChartOptions;\r\n        else \r\n            return this.radialChartOptions;  \r\n    }\r\n\r\n    public downloadChart(event, canvas) {\r\n        let anchor = event.target;\r\n        let can = document.getElementsByTagName(canvas)[0] as HTMLCanvasElement;\r\n        anchor.href = can.toDataURL(\"image/png\");\r\n        anchor.download = \"Graph.png\";\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/graph.service.ts","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormArray, FormControl } from '@angular/forms';\r\nimport { SurveyService } from 'app/services/survey.service';\r\nimport { SurveyInfo } from '../../models/surveyInfo.model';\r\nimport { Question } from '../../models/question.model';\r\nimport { Option } from '../../models/option.model';\r\n\r\n@Component({\r\n   selector: 'app-edit',\r\n   templateUrl: './edit.component.html',\r\n   styleUrls: ['./edit.component.css'],\r\n   providers: [SurveyService]\r\n})\r\n\r\nexport class EditComponent implements OnInit {\r\n\r\n   /*\r\n      Edit Variables\r\n   */\r\n\r\n   // declare the survey form group holding all the values for the form\r\n   survey: FormGroup;\r\n   // Holds the dynamic survey variables for display\r\n   surveys: Array<any> = [];\r\n   currentQuestionScope: number;\r\n   currentOptionScope: Array<number>;\r\n   lastSurveyId: number = 0;\r\n   lastQuestionId: number = 0;\r\n   lastOptionId: number = 0;\r\n   // used to determine if the survey name is readonly or not\r\n   nameReadOnly: boolean;\r\n   // is new survey?\r\n   isNewSurvey: boolean;\r\n   modal;\r\n\r\n   constructor(private _fb: FormBuilder,\r\n               public surveyService: SurveyService,\r\n               private changeref: ChangeDetectorRef) { }\r\n\r\n   // initilaize a new blank survey form\r\n   ngOnInit() {\r\n      // Get the modal\r\n      this.modal = document.getElementById('success');\r\n      this.newSurveyForm();\r\n      this.surveyService.getAllSurveys().subscribe(response => {\r\n            // Get 1 survey at a time and push into surveys array\r\n            for (let i = 0; i < response.body.length; i++) {\r\n                  let survey: SurveyInfo = {\r\n                        \"survey_id\": response.body[i].survey_id,\r\n                        \"survey_name\": response.body[i].survey_name,\r\n                        \"date_created\": response.body[i].date_created,\r\n                        \"survey_is_active\": response.body[i].survey_is_active\r\n                  };\r\n    \r\n                  this.surveys.push(survey);\r\n                  this.lastSurveyId++;\r\n                  \r\n                  // Get the survey questions by selectedSurveyId\r\n                  this.surveyService.getAllSurveyQuestions(this.surveys[i].survey_id).subscribe(response => {\r\n                        // Initialize the questions\r\n                        this.surveys[i].questions = [];\r\n                        // Iterate through the questions and push them one at a time\r\n                        for (let j = 0; j < response.body.length; j++) {\r\n                              let question: Question = {\r\n                                    \"question_id\": response.body[j].question_id,\r\n                                    \"question_text\": response.body[j].question_text,\r\n                                    \"question_type\": response.body[j].question_type,\r\n                                    \"question_is_active\": response.body[j].question_is_active,\r\n                                    options: []\r\n                              };\r\n                              this.surveys[i].questions.push(question);\r\n                              this.lastQuestionId++;\r\n                        }\r\n                        \r\n                        // Get the survey options based on the selectedSurveyId\r\n                        this.surveyService.getAllSurveyOptions(this.surveys[i].survey_id).subscribe(response => {\r\n\r\n                              for (let k = 0; k < this.surveys[i].questions.length; k++) {\r\n                                    for (let l = 0; l < response.body.length; l++) {\r\n                                          let option: Option = {\r\n                                                \"option_id\": response.body[l].option_id,\r\n                                                \"option_text\": response.body[l].option_text,\r\n                                                \"option_is_active\": response.body[l].option_is_active,\r\n                                                \"question_id\": response.body[l].question_id\r\n                                          };\r\n                                          // If the question IDs match, push the option into the questions[j].options array\r\n                                          if (this.surveys[i].questions[k].question_id == response.body[l].question_id) {\r\n                                                this.surveys[i].questions[k].options.push(option);\r\n                                                this.lastOptionId++;\r\n                                          }\r\n                                    }\r\n                              }\r\n                        }, (error) => {\r\n                              console.log('error is ', error)\r\n                        }) \r\n                  },(error) => {\r\n                        console.log('error is ', error)\r\n                  })\r\n            } \r\n      }, (error) => {\r\n          console.log('error is ', error)\r\n      })\r\n   }\r\n   \r\n   // sets the survey name to readonly based on the edit global\r\n   setReadOnly(): boolean {\r\n      return this.nameReadOnly;\r\n   }\r\n\r\n   // sets the survey form to a blank survey\r\n   newSurveyForm() {\r\n      this.isNewSurvey = true;\r\n      this.currentQuestionScope = -1;\r\n      this.currentOptionScope = [-1];\r\n      \r\n      this.survey = this._fb.group({\r\n            survey_id: new FormControl(''),\r\n            survey_name: new FormControl(''),\r\n            questions: this._fb.array([\r\n                  this.initQuestion(),\r\n            ])\r\n      });\r\n      this.nameReadOnly = false;\r\n      jQuery(\"#surveySelect\").val(-1);\r\n   }\r\n\r\n   // create a new blank question\r\n   initQuestion() {\r\n      return this._fb.group({\r\n         question_is_active: new FormControl({value: true, disabled: true}),\r\n         question_text: new FormControl(''),\r\n         question_type: new FormControl(''),\r\n         options: this._fb.array([\r\n            this.initOption(),\r\n         ])\r\n      });\r\n   }\r\n\r\n   // create a new blank option\r\n   initOption() {\r\n      return this._fb.group({\r\n         option_is_active: new FormControl({value: true, disabled: true}),\r\n         option_text: new FormControl('')\r\n      })\r\n   }\r\n\r\n   // add question to the form group array at the given index\r\n   addQuestion(idx: number) {\r\n      const control = <FormArray>this.survey.controls['questions'];\r\n      control.insert(idx + 1, this.initQuestion());\r\n   }\r\n\r\n   // remove question from the form group array at the given index\r\n   removeQuestion(idx: number) {\r\n      const control = <FormArray>this.survey.controls['questions'];\r\n      control.removeAt(idx);\r\n   }\r\n\r\n   // add option to the form group array at the given index\r\n   addOption(question, questionIndex: number): void {\r\n      const control = <FormArray>question.controls.options;\r\n      control.push(this.initOption());\r\n      if (this.isNewSurvey) {\r\n            this.currentOptionScope.push(-1);\r\n      }\r\n   }\r\n\r\n   // remove option from the form group array at the given index\r\n   removeOption(question, optionIndex: number, questionIndex: number) {\r\n      const control = <FormArray>question.controls.options;\r\n      control.removeAt(optionIndex);\r\n      if (this.isNewSurvey) {\r\n            this.currentOptionScope.pop();\r\n      }\r\n   }\r\n\r\n   // checks the question type and returns boolean to display the options div\r\n   showOptionsDiv(question): boolean {\r\n      const questionType = <FormArray>question.controls.question_type.value;\r\n      let ret: boolean;\r\n      switch (questionType.toString()) {\r\n         case \"select\":\r\n            ret = true;\r\n            break;\r\n         case \"checkbox\":\r\n            ret = true;\r\n            break;\r\n         case \"radio\":\r\n            ret = true;\r\n            break;\r\n         case \"text\":\r\n            ret = false;\r\n            break;\r\n         default:\r\n            ret = true;\r\n      }\r\n      return ret;\r\n   }\r\n\r\n   // Used to update the formgroup from a given survey id\r\n   updateSurveyFormData(survey_id) {\r\n      this.isNewSurvey = false;\r\n      let currSurvey;\r\n      this.nameReadOnly = true;\r\n      // loop through the surveys and set the current one to the one that mathches the id\r\n      this.surveys.forEach(s => {\r\n         currSurvey = s.survey_id == survey_id ? s : currSurvey;\r\n      });\r\n      // populate the survey form with proper data\r\n      this.survey = this._fb.group({\r\n         survey_id: new FormControl(currSurvey.survey_id),\r\n         survey_name: new FormControl({value: currSurvey.survey_name, disabled: true}),\r\n         questions: this._fb.array([])\r\n      });\r\n      // patch the questions nested array value with the new questions\r\n      this.currentOptionScope = [];\r\n      this.patchFormQuestions(currSurvey.questions);\r\n      this.currentQuestionScope = currSurvey.questions.length - 1;\r\n   }\r\n\r\n   // used to update the questions of the form group qustions array\r\n   patchFormQuestions(questions: any[]) {\r\n      const control = <FormArray>this.survey.controls['questions'];\r\n      questions.forEach(q => {\r\n            control.push(this._fb.group({\r\n               question_is_active: new FormControl(q.question_is_active),\r\n               question_text: new FormControl({value: q.question_text, disabled: true}),\r\n               question_type: new FormControl({value: q.question_type, disabled: true}),\r\n               options: this.patchFormOptions(q.options)\r\n            }));\r\n      });\r\n   }\r\n\r\n   // used to update the options of the nested form group options array\r\n   patchFormOptions(options) {\r\n      let ops = new FormArray([]);\r\n      options.forEach(o => {\r\n         ops.push(this._fb.group({\r\n            option_is_active: new FormControl(o.option_is_active),\r\n            option_text: new FormControl({value: o.option_text, disabled: true})\r\n         }));\r\n      });\r\n      this.currentOptionScope.push(options.length - 1);\r\n      return ops;\r\n   }\r\n\r\n   // Saves/Uploads the selected formData to the database\r\n   save(formData) {\r\n      // Get the survey index\r\n      let surveyIndex = this.getSurveyIndex(formData);\r\n      // Check if its a new survey\r\n      console.log(surveyIndex);\r\n      let question;\r\n      let option;\r\n      let architecture;\r\n      if (surveyIndex == -1) {\r\n            \r\n            //this.lastSurveyId++;\r\n            //let surveyName = { \"survey_name\": formData.survey_name };\r\n            this.surveyService.postNewSurvey(formData).subscribe();\r\n             /*\r\n            for (let i = 0; i < formData.questions.length; i++) {\r\n\r\n                  question = {\r\n                        \"question_text\": formData.questions[i].question_text,\r\n                        \"question_type\": formData.questions[i].question_type\r\n                  };\r\n\r\n                  this.surveyService.postQuestion(question).subscribe();\r\n                  this.lastQuestionId++;\r\n                  this.surveyService.wait(50);\r\n                  for (let j = 0; j < formData.questions[i].options.length; j++) {\r\n                 \r\n                        option = {\r\n                              \"option_text\": formData.questions[i].options[j].option_text,\r\n                              \"question_id\": this.lastQuestionId\r\n                        };\r\n\r\n                        this.surveyService.wait(50);\r\n                        this.surveyService.postOption(option).subscribe();\r\n                        this.surveyService.wait(50);\r\n                        this.lastOptionId++;\r\n                        console.log(\"surveyId: \" + this.lastSurveyId);\r\n                        console.log(\"questionId: \" + this.lastQuestionId);\r\n                        console.log(\"optionId: \" + this.lastOptionId);\r\n                        architecture = {\r\n                              \"survey_id\": this.lastSurveyId,\r\n                              \"question_id\": this.lastQuestionId,\r\n                              \"option_id\": this.lastOptionId\r\n                        };\r\n\r\n                        this.surveyService.postArchitecture(architecture).subscribe();\r\n                  }\r\n            }\r\n      // If index is not -1, this is an existing survey\r\n      */\r\n     } else {\r\n           for (let i = 0; i < this.surveys[surveyIndex].questions.length; i++) {\r\n                 // // Check if questions active/inactive has changed, then update the database\r\n                  console.log(\"qactive: \" + formData.questions[i].question_is_active);\r\n                 if (formData.questions[i].question_is_active !== \r\n                     this.surveys[surveyIndex].questions[i].question_is_active) {\r\n                        question = {\r\n                              \"question_id\": this.surveys[surveyIndex].questions[i].question_id,\r\n                              \"question_is_active\": formData.questions[i].question_is_active\r\n                        };\r\n                        console.log(\"question.isactive: \" + question.question_is_active);\r\n                        this.surveyService.updateSurveyQuestionActive(question).subscribe();\r\n                 }\r\n                 // Check if options active/inactive has changed\r\n                 for (let j = 0; j < this.surveys[surveyIndex].questions[i].options.length; j++) {\r\n                        if (formData.questions[i].options[j].option_is_active === \"true\" || formData.questions[i].options[j].option_is_active === \"false\") {\r\n                              let bool = JSON.parse(formData.questions[i].options[j].option_is_active);\r\n                              formData.questions[i].options[j].option_is_active = bool;\r\n                        }\r\n                        // If it has changed, update the database\r\n                        if (formData.questions[i].options[j].option_is_active !== \r\n                              this.surveys[surveyIndex].questions[i].options[j].option_is_active) {\r\n                                    option = {\r\n                                          \"option_id\": this.surveys[surveyIndex].questions[i].options[j].option_id,\r\n                                          \"option_is_active\": formData.questions[i].options[j].option_is_active\r\n                                    };\r\n                              this.surveyService.updateSurveyQuestionActive(option).subscribe();\r\n                        }\r\n                 }\r\n                 // Check if there were options added\r\n                 if (this.surveys[surveyIndex].questions[i].options.length < formData.questions[i].options.length) {\r\n                       for (let m = this.surveys[surveyIndex].questions[i].options.length; m < formData.questions[i].options.length; m++) {\r\n                             this.lastOptionId++;\r\n                             option = {\r\n                                    \"option_text\": formData.questions[i].options[m].option_text,\r\n                                    \"question_id\": this.lastQuestionId\r\n                              };\r\n                              this.surveyService.postOption(option).subscribe();\r\n                              this.surveyService.wait(50);\r\n                              console.log(\"surveyId: \" + this.surveys[surveyIndex].survey_id);\r\n                              console.log(\"questionId: \" + this.surveys[surveyIndex].questions[i].question_id);\r\n                              console.log(\"optionId: \" + this.lastOptionId);\r\n                              architecture = {\r\n                                    \"survey_id\": this.surveys[surveyIndex].survey_id,\r\n                                    \"question_id\": this.surveys[surveyIndex].questions[i].question_id,\r\n                                    \"option_id\": this.lastOptionId\r\n                              };\r\n\r\n                              this.surveyService.postArchitecture(architecture).subscribe();\r\n                       }\r\n                 }\r\n           }\r\n           // Check if there are new questions added\r\n           if (this.surveys[surveyIndex].questions.length < formData.questions.length) {\r\n                 for (let k = this.surveys[surveyIndex].questions.length; k < formData.questions.length; k++) {\r\n                        this.lastQuestionId++;\r\n                        question = {\r\n                              \"question_text\": formData.questions[k].question_text,\r\n                              \"question_type\": formData.questions[k].question_type\r\n                        };\r\n                        this.surveyService.postQuestion(question).subscribe();\r\n                        this.surveyService.wait(50);\r\n\r\n                        for (let l = 0; l < formData.questions[k].options.length; l++) {\r\n                              this.lastOptionId++;\r\n                              option = {\r\n                                    \"option_text\": formData.questions[k].options[l].option_text,\r\n                                    \"question_id\": this.lastQuestionId\r\n                              };\r\n                              this.surveyService.wait(50);\r\n                              this.surveyService.postOption(option).subscribe();\r\n                              this.surveyService.wait(50);\r\n                              console.log(\"surveyId: \" + this.surveys[surveyIndex].survey_id);\r\n                              console.log(\"questionId: \" + this.lastQuestionId);\r\n                              console.log(\"optionId: \" + this.lastOptionId);\r\n                              architecture = {\r\n                                    \"survey_id\": this.surveys[surveyIndex].survey_id,\r\n                                    \"question_id\": this.lastQuestionId,\r\n                                    \"option_id\": this.lastOptionId\r\n                              };\r\n                              this.surveyService.wait(50);\r\n\r\n                              this.surveyService.postArchitecture(architecture).subscribe();\r\n                        }\r\n                 }\r\n           }\r\n     }\r\n     console.log(formData);\r\n   }\r\n\r\n   // Returns the surveyIndex that matches the formData.survey_id\r\n   getSurveyIndex(formData) {\r\n      let index;\r\n      console.log(\"formData.survey_id\" + formData.survey_id);\r\n      if (formData.survey_id) {\r\n            index = formData.survey_id - 1;\r\n      } else {\r\n            index = -1;\r\n      }\r\n      console.log(\"index\" + index);\r\n      return index;\r\n   }\r\n\r\n   // When user clicks save survey, display modal\r\n   openModal(): void {\r\n      this.modal.style.display = \"block\";\r\n   }\r\n\r\n   // When user clicks X, close the modal and refresh the page to see changes\r\n   closeModal(): void {\r\n      this.modal.style.display = \"none\";\r\n      window.location.reload();\r\n   }\r\n\r\n} \r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pages/edit/edit.component.ts","import { Component, OnInit, ChangeDetectorRef,  } from '@angular/core';\r\nimport { Globals } from '../../globals';\r\nimport { SurveyService } from 'app/services/survey.service';\r\nimport { SurveyInfo } from '../../models/surveyInfo.model';\r\nimport { Question } from '../../models/question.model';\r\nimport { Option } from '../../models/option.model';\r\nimport { Responses } from '../../models/responseExport.model';\r\nimport { FormBuilder, FormGroup, FormArray, FormControl } from '@angular/forms';\r\n\r\n\r\n\r\n@Component({\r\n   selector: 'app-exportRaw',\r\n   styleUrls: ['./exportRaw.component.css'],\r\n   templateUrl: './exportRaw.component.html',\r\n   providers: [SurveyService]\r\n\r\n})\r\nexport class ExportRawComponent implements OnInit {\r\n   \r\n   constructor(\r\n      public globals: Globals,\r\n      public surveyService: SurveyService,\r\n      private _fb: FormBuilder,\r\n      private changeref: ChangeDetectorRef\r\n\r\n      ) {}\r\n\r\n   // datafeed that the table uses to populate data\r\n   dataFeed: any[];\r\n   // set the current survey and the date to filter by\r\n   currSurvey: any;\r\n   // Lower date limit for the survey date taken\r\n   dateFilterStart: Date;\r\n   // Upper date limit for the survey date taken\r\n   dateFilterEnd: Date;\r\n   // Holds the dynamic survey variables for display\r\n   surveys: Array<any> = [];\r\n   // used to determine if the survey name is readonly or not\r\n   nameReadOnly: boolean;\r\n   \r\n   showExportDiv: boolean = false;\r\n\r\n   ngOnInit() {\r\n      this.surveyService.getAllSurveys().subscribe((response) => {\r\n         // Get 1 survey at a time and push into surveys array\r\n         for (let i = 0; i < response.body.length; i++) {\r\n               let survey: SurveyInfo = {\r\n                     \"survey_id\": response.body[i].survey_id,\r\n                     \"survey_name\": response.body[i].survey_name,\r\n                     \"date_created\": response.body[i].date_created.split(\" \")[0],\r\n                     \"survey_is_active\": response.body[i].survey_is_active\r\n               };\r\n \r\n               this.surveys.push(survey);\r\n               // Get the survey questions by selectedSurveyId\r\n               this.surveyService.getAllSurveyQuestions(this.surveys[i].survey_id).subscribe((response)=>{\r\n                     // Initialize the questions\r\n                     this.surveys[i].questions = [];\r\n                     // Iterate through the questions and push them one at a time\r\n                     for (let j = 0; j < response.body.length; j++) {\r\n                           let question: Question = {\r\n                                 \"question_id\": response.body[j].question_id,\r\n                                 \"question_text\": response.body[j].question_text,\r\n                                 \"question_type\": response.body[j].question_type,\r\n                                 \"question_is_active\": response.body[j].question_is_active,\r\n                                 options: []\r\n                           };\r\n                           this.surveys[i].questions.push(question);\r\n                     }\r\n                     \r\n                     // Get the survey options based on the selectedSurveyId\r\n                     this.surveyService.getAllSurveyOptions(this.surveys[i].survey_id).subscribe((response) => {\r\n\r\n                        for (let k = 0; k < this.surveys[i].questions.length; k++) {\r\n                              for (let l = 0; l < response.body.length; l++) {\r\n                                    let option: Option = {\r\n                                          \"option_id\": response.body[l].option_id,\r\n                                          \"option_text\": response.body[l].option_text,\r\n                                          \"option_is_active\": response.body[l].option_is_active,\r\n                                          \"question_id\": response.body[l].question_id\r\n                                    };\r\n                                    // If the question IDs match, push the option into the questions[j].options array\r\n                                    if (this.surveys[i].questions[k].question_id == response.body[l].question_id) {\r\n                                          this.surveys[i].questions[k].options.push(option);\r\n                                    }\r\n                              }\r\n                        }\r\n                        // Manually detect changes as the page will load faster than the async call\r\n                        this.changeref.detectChanges();\r\n                     }, (error) => {\r\n                           console.log('error is ', error)\r\n                     })\r\n                     // Get the survey responses based on the selectedSurveyID\r\n                     this.surveyService.getSurveyResponses(this.surveys[i].survey_id).subscribe((response) => {\r\n                           \r\n                        for (let k = 0; k < this.surveys[i].questions.length; k++) {\r\n                           this.surveys[i].questions[k].responses = [];\r\n                              for (let l = 0; l < response.body.length; l++) {\r\n                                    let response1: Responses = {\r\n                                          \"response_id\": response.body[l].response_id,\r\n                                          \"survey_id\": response.body[l].survey_id,\r\n                                          \"question_id\": response.body[l].question_id,\r\n                                          \"option_id\": response.body[l].option_id,\r\n                                          \"response_text\": response.body[l].response_text,\r\n                                          \"date_taken\": response.body[l].date_taken.split(\" \")[0],\r\n                                          \"survey_hash\": response.body[l].survey_hash\r\n                                    };\r\n                                    // If the question IDs match, push the response into the questions[j].responses array\r\n                                    if (this.surveys[i].questions[k].question_id == response.body[l].question_id) {\r\n                                          this.surveys[i].questions[k].responses.push(response1);\r\n                                    }\r\n                              }\r\n                           }\r\n                           // Manually detect changes as the page will load faster than the async call\r\n                           this.changeref.detectChanges();\r\n                           this.showExportDiv = true;\r\n                           // set the current survey to the first survey in the  globals\r\n                           this.currSurvey = this.surveys[0];\r\n                            // update the date value select to be the date created of the survey\r\n                           this.updateDate(this.currSurvey.date_created);\r\n                           // update the upper date limit with the latest response on the current survey\r\n                           this.updateDateUpper(this.currSurvey.questions[0].responses[this.currSurvey.questions[0].responses.length - 1].date_taken);\r\n                           // set the data feed to -1 which is all questions\r\n                           this.updateDataFeed(-1);\r\n\r\n                     }, (error) => {\r\n                           console.log('error is ', error)\r\n                     }) \r\n                     // Manually detect changes as the page will load faster than the async call\r\n                     this.changeref.detectChanges();\r\n               },(error) => {\r\n                     console.log('error is ', error)\r\n               })\r\n               // Manually detect changes as the page will load faster than the async call\r\n               this.changeref.detectChanges();\r\n         } \r\n   }, (error) => {\r\n       console.log('error is ', error)\r\n   })      \r\n   }\r\n\r\n\r\n   // sets the survey name to readonly based on the edit global\r\n   setReadOnly(): boolean {\r\n      return this.nameReadOnly;\r\n   }\r\n\r\n\r\n   // set the date filter global from the survey\r\n   updateDate(date) {\r\n      this.dateFilterStart = date;\r\n   }\r\n\r\n   // set the upper date filter global from the survey\r\n   updateDateUpper(date) {\r\n      this.dateFilterEnd = date;\r\n   }\r\n\r\n   // set the current survey from the given id \r\n   updateSurvey(id) {\r\n      this.currSurvey = this.surveys[id];\r\n      // get questions from the current survey\r\n      this.getQuestions();\r\n      // update feed to -1 which is all questions\r\n      this.updateDataFeed(-1);\r\n   }\r\n\r\n   // get all the questions of the current survey, filtering out the inactive ones\r\n   getQuestions(): string[] {\r\n      return this.currSurvey.questions.filter(\r\n         (question: any) =>\r\n            question.question_is_active === true);\r\n   }\r\n\r\n   // updates the datafeed from a given question\r\n   updateDataFeed(question_id: number) {\r\n      // clear the datafeed.\r\n      this.dataFeed = [];\r\n      // if the question = -1 then get all questions from the survey\r\n      if (question_id == -1) {\r\n         this.currSurvey.questions.forEach(question => {\r\n            if (question.question_is_active) {\r\n               question.responses.forEach(response => {\r\n                  this.dataFeed.push({\r\n                     question: question.question_text,\r\n                     question_id: question.question_id,\r\n                     response: response.response_text,\r\n                     date_taken: response.date_taken\r\n                  })\r\n               });\r\n            }\r\n         });\r\n      }\r\n      // otherwise, get get the responses from the given question id\r\n      else {\r\n         this.currSurvey.questions.forEach(question => {\r\n            if (question.question_id == question_id) {\r\n               question.responses.forEach(response => {\r\n                  this.dataFeed.push({\r\n                     question: question.question_text,\r\n                     question_id: question.question_id,\r\n                     response: response.response_text,\r\n                     date_taken: response.date_taken\r\n                  })\r\n               });\r\n            }\r\n         });\r\n      }\r\n   }\r\n\r\n   // download the feed table as a CSV\r\n   downloadCSV(csv) {\r\n      let csvFile;\r\n      let downloadLink;\r\n      // CSV file\r\n      csvFile = new Blob([csv], { type: \"text/csv\" });\r\n      // Download link\r\n      downloadLink = document.createElement(\"a\");\r\n      // File name\r\n      downloadLink.download = this.currSurvey.survey_name;\r\n      // Create a link to the file\r\n      downloadLink.href = window.URL.createObjectURL(csvFile);\r\n      // Hide download link\r\n      downloadLink.style.display = \"none\";\r\n      // Add the link to DOM\r\n      document.body.appendChild(downloadLink);\r\n      // Click download link\r\n      downloadLink.click();\r\n   }\r\n\r\n   // export the table to format for download\r\n   exportTableToCSV() {\r\n      let csv = [];\r\n      let rows = document.querySelectorAll(\"table tr\");\r\n\r\n      for (let i = 0; i < rows.length; i++) {\r\n         let row = [], cols = rows[i].querySelectorAll(\"td, th\");\r\n         for (let j = 0; j < cols.length; j++)\r\n            row.push(cols[j].innerHTML);\r\n         csv.push(row.join(\",\"));\r\n      }\r\n      // Download CSV file\r\n      this.downloadCSV(csv.join(\"\\n\"));\r\n      console.log(\"This is the csv: \" + csv.join(\"\\n\"))\r\n   }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pages/exportRaw/exportRaw.component.ts","import { Component, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormArray, FormControl } from '@angular/forms';\r\nimport { GraphService } from '../../services/graph.service'\r\nimport { Response } from '../../models/response.model';\r\nimport { SurveyService } from '../../services/survey.service';\r\nimport { QuestionResponses } from '../../models/questionResponses.model';\r\nimport { Option } from '../../models/option.model';\r\nimport { SurveyResponses } from '../../models/surveyResponses.model'\r\n\r\n@Component({\r\n   selector: 'app-graphs',\r\n   templateUrl: './graphs.component.html',\r\n   styleUrls: ['./graphs.component.css']\r\n})\r\n\r\nexport class GraphsComponent implements OnInit {\r\n\r\n   constructor(\r\n      public graphService: GraphService,\r\n      private changeref: ChangeDetectorRef,\r\n      public surveyService: SurveyService,\r\n      private fb: FormBuilder) { };\r\n\r\n   // global to track which switch for the dataset\r\n   currentDatasetType: string = 'single';\r\n   // form for the chart filters\r\n   chartForm: FormGroup;\r\n   // sub form specifically for the matrix options\r\n   optionsForm: FormGroup;\r\n   // canvas id holder\r\n   canvas: any;\r\n   // canvas context\r\n   ctx: any;\r\n   // chart object\r\n   chart: Chart = null;\r\n   // contains the selected options\r\n   selectedOptions: string[];\r\n   // hold off on displaying div until this is true after data loaded\r\n   displayDiv = false;\r\n   // Holds the dynamic survey variables for display\r\n   surveys: Array<SurveyResponses> = [];\r\n\r\n   ngOnInit(): void {\r\n      this.canvas = document.getElementById('graphCanvas');\r\n      this.ctx = this.canvas.getContext('2d');\r\n      // init the chart form\r\n      this.initChartForm();\r\n      // get the surveys and populated inner fields with inner get calls\r\n      this.surveyService.getAllSurveys().subscribe(response => {\r\n         // Get 1 survey at a time and push into surveys array\r\n         for (let i = 0; i < response.body.length; i++) {\r\n            let survey: SurveyResponses = {\r\n               \"survey_id\": response.body[i].survey_id,\r\n               \"survey_name\": response.body[i].survey_name,\r\n               \"date_created\": response.body[i].date_created,\r\n                questions: []\r\n            };\r\n            //this.surveys.push(survey);\r\n            this.surveys.push(survey);\r\n            this.changeref.detectChanges();\r\n            // Get the survey questions by selectedSurveyId\r\n            this.surveyService.getAllSurveyQuestions(this.surveys[i].survey_id).subscribe(response => {\r\n               // Initialize the questions\r\n               this.surveys[i].questions = [];\r\n               // Iterate through the questions and push them one at a time\r\n               for (let j = 0; j < response.body.length; j++) {\r\n                  let question: QuestionResponses = {\r\n                     \"question_id\": response.body[j].question_id,\r\n                     \"question_text\": response.body[j].question_text,\r\n                     \"question_type\": response.body[j].question_type,\r\n                     \"question_is_active\": response.body[j].question_is_active,\r\n                     options: [],\r\n                     responses: []\r\n                  };\r\n                  //this.surveys[i].questions.push(question);\r\n                  this.surveys[i].questions.push(question);\r\n                  this.changeref.detectChanges();\r\n               }\r\n               \r\n\r\n               // Get the survey options based on the selectedSurveyId\r\n               this.surveyService.getAllSurveyOptions(this.surveys[i].survey_id).subscribe(response => {\r\n                  for (let k = 0; k < this.surveys[i].questions.length; k++) {\r\n                     for (let l = 0; l < response.body.length; l++) {\r\n                        let option: Option = {\r\n                           \"option_id\": response.body[l].option_id,\r\n                           \"option_text\": response.body[l].option_text,\r\n                           \"option_is_active\": response.body[l].option_is_active,\r\n                           \"question_id\": response.body[l].question_id\r\n                        };\r\n                        // If the question IDs match, push the option into the questions[j].options array\r\n                        if (this.surveys[i].questions[k].question_id == response.body[l].question_id) {\r\n                           this.surveys[i].questions[k].options.push(option);\r\n                           this.changeref.detectChanges();\r\n                        }\r\n                     }\r\n                  }\r\n                  // Manually detect changes as the page will load faster than the async call\r\n                  this.changeref.detectChanges();\r\n\r\n                  // Get the survey responses based on the selectedSurveyId\r\n                  this.surveyService.getSurveyResponses(this.surveys[i].survey_id).subscribe(response => {\r\n                        for (let m = 0; m < this.surveys[i].questions.length; m++) {\r\n                              for (let n = 0; n < response.body.length; n++) {\r\n                                    let responseData: Response = {\r\n                                    \"question_id\": response.body[n].question_id,\r\n                                    \"survey_id\": response.body[n].survey_id,\r\n                                    \"option_id\": response.body[n].option_id,\r\n                                    \"response_text\": response.body[n].response_text,\r\n                                    \"survey_hash\": response.body[n].survey_hash\r\n                                    };\r\n                                    // If the question IDs match, push the response into the questions[j].response array\r\n                                    if (this.surveys[i].questions[m].question_id == response.body[n].question_id) {\r\n                                    this.surveys[i].questions[m].responses.push(responseData);\r\n                                    this.changeref.detectChanges();\r\n                                    }\r\n                              }\r\n                        }\r\n                        // Manually detect changes as the page will load faster than the async call\r\n                        this.changeref.detectChanges();\r\n                        if (i == this.surveys.length - 1) {\r\n                              this.displayDiv = true;\r\n                              // init the options form\r\n                              this.initOptionsForm();\r\n                              // grab the updated selected options\r\n                              this.updateSelectedOptions();\r\n                              // update the chart\r\n                              this.updateChart();\r\n                        }\r\n                  }, (error) => {\r\n                        console.log('error is ', error)\r\n                  })\r\n                  // Manually detect changes as the page will load faster than the async call\r\n                  this.changeref.detectChanges();\r\n               }, (error) => {\r\n                  console.log('error is ', error)\r\n               })\r\n               // Manually detect changes as the page will load faster than the async call\r\n               this.changeref.detectChanges();\r\n            }, (error) => {\r\n               console.log('error is ', error)\r\n            })\r\n            // Manually detect changes as the page will load faster than the async call\r\n            this.changeref.detectChanges();\r\n         }\r\n         this.changeref.detectChanges();\r\n      }, (error) => {\r\n         console.log('error is ', error)\r\n      })\r\n   }\r\n\r\n   // init chart form\r\n   initChartForm() {\r\n      this.chartForm = this.fb.group({\r\n         chartType: new FormControl('pie'),\r\n         surveyId: new FormControl('0'),\r\n         questionId: new FormControl('0'),\r\n         subQuestionId: new FormControl('1')\r\n      });\r\n   }\r\n\r\n    // init the options with the subquestion id appropiately \r\n    initOptionsForm() {\r\n      const controls = this.getSubQuestionOptions().map(o => new FormControl(false));\r\n      controls[0].setValue(true); // Set the first checkbox to true (checked)\r\n      this.optionsForm = this.fb.group({\r\n         options: new FormArray(controls)\r\n      });\r\n   }\r\n\r\n   // get the options of the sub questions with active options\r\n   getSubQuestionOptions(): any[] {\r\n      let sid: number = this.chartForm.controls.surveyId.value;\r\n      let qid: number = this.chartForm.controls.subQuestionId.value;\r\n      let opsReturn;\r\n\r\n      this.surveys[sid].questions.forEach(q => {\r\n         if (q.question_id == qid) {\r\n            opsReturn = q.options\r\n               .filter((option: any) => option.option_is_active === true);\r\n         }\r\n      });\r\n\r\n      return opsReturn;\r\n   }\r\n\r\n   // used when a change happens to update the chart\r\n   updateChart(): void {\r\n      // if the switch is on single, destroy the chart, get the new data, build it using graph service\r\n      if (this.currentDatasetType === 'single') {\r\n         let map: Map<string, number>;\r\n         this.destroyChart();\r\n         map = this.mapSingleData();\r\n         this.buildChart(this.graphService.createSingleChart(this.ctx, this.chartForm.controls.chartType.value, map));\r\n      }\r\n      // if the switch is on multiple, destroy the chart, create new Chart from graph service, build it\r\n      else {\r\n         this.updateSelectedOptions();\r\n         this.destroyChart();\r\n         let c: Chart = this.graphService.createMatrixChart(this.ctx, this.chartForm.controls.chartType.value, this.matrixGraphData())\r\n         this.buildChart(c);\r\n      }\r\n   }\r\n\r\n   // map the dataset for an individual dataset graph\r\n   mapSingleData(): Map<string, number> {\r\n      let map = new Map();\r\n      let survey = this.surveys[this.chartForm.controls.surveyId.value];\r\n      survey.questions.forEach(question => {\r\n         // for each question, if the question id equals the one in the select value\r\n         if (question.question_id == this.chartForm.controls.questionId.value) {\r\n            // for each response of the question\r\n            question.responses.forEach(r => {\r\n               // if the dataset has the response text/answer: get the count and increase and set back\r\n               if (map.has(r.response_text)) {\r\n                  let count = map.get(r.response_text);\r\n                  // increment count by 1\r\n                  count += 1;\r\n                  map.set(r.response_text, count);\r\n               }\r\n               // if the dataset does not have the response, it is the first time seeing it so set with value of 1\r\n               else {\r\n                  map.set(r.response_text, 1);\r\n               }\r\n            });\r\n         }\r\n      });\r\n      return map;\r\n   }\r\n\r\n   // update the selected options to only be the checked ones\r\n   updateSelectedOptions() {\r\n      const options = this.getSubQuestionOptions()\r\n      this.selectedOptions = this.optionsForm.value.options\r\n         .map((v, i) => v ? options[i].option_text : null)\r\n         .filter(v => v !== null);\r\n   }\r\n\r\n\r\n   mapTopLevelFilter(): Map<string, string> {\r\n      let responseMap: Map<string, string> = new Map();\r\n      this.surveys[this.chartForm.controls.surveyId.value].questions.forEach(q => {\r\n         if (q.question_id == this.chartForm.controls.questionId.value) {\r\n            q.responses.map(r => responseMap.set(r.survey_hash, r.response_text));\r\n         }\r\n      });\r\n      return responseMap;\r\n   }\r\n\r\n   ///Matrix label map \r\n   initMatrixLabelsMap(): Map<string, number> {\r\n      let labelMap: Map<string, number> = new Map();\r\n      this.surveys[this.chartForm.controls.surveyId.value].questions.forEach(q => {\r\n         if (q.question_id == this.chartForm.controls.questionId.value) {\r\n            // on every option, if the option is active, add to the label map, if not active then nothing happens\r\n            q.options.map(o => o.option_is_active ? labelMap.set(o.option_text, 0) : null);\r\n         }\r\n      });\r\n      return labelMap;\r\n   }\r\n\r\n   mapMatrixDataSets(): any[] {\r\n      let questionMap: Map<string, string> = this.mapTopLevelFilter();\r\n      let datasets: any[] = new Array();\r\n      // go through the checkboxes that are selected\r\n      this.selectedOptions.forEach((o, index) => {\r\n         // dsMap contains all the top question options labels with values 0\r\n         let dsMap = this.initMatrixLabelsMap();\r\n         // Sub question responses loop\r\n         this.surveys[this.chartForm.controls.surveyId.value].questions.forEach(sq => {\r\n            if (sq.question_id == this.chartForm.controls.subQuestionId.value) {\r\n               // loop through all the sub question responses\r\n               sq.responses.forEach(r => {\r\n                  // question map has hash id key of this response\r\n                  if (questionMap.has(r.survey_hash)) {\r\n                     // key for new 'map'\r\n                     let k = questionMap.get(r.survey_hash);\r\n                     // if the resonse text equals the option then it coorelates\r\n                     if (r.response_text == o) {\r\n                        // make sure that the dataset map has the key\r\n                        if (dsMap.has(k)) {\r\n                           // get count in dataset map\r\n                           let count = dsMap.get(k);\r\n                           // increment count of coorelated data by 1\r\n                           count += 1;\r\n                           // set new count\r\n                           dsMap.set(k, count);\r\n                        }\r\n                     }\r\n                  }\r\n               });\r\n            }\r\n         });\r\n         // push the dataset values\r\n         datasets.push({\r\n            label: o,\r\n            data: Array.from(dsMap.values()),\r\n            backgroundColor: this.graphService.getColorByIndex(index)\r\n         })\r\n      });\r\n      return datasets;\r\n   }\r\n\r\n   // pulls together the above functions to set the labels and datasets for the matrix graph\r\n   matrixGraphData(): any {\r\n      return {\r\n         labels: Array.from(this.initMatrixLabelsMap().keys()),\r\n         datasets: this.mapMatrixDataSets()\r\n      }\r\n   }\r\n\r\n   // build the chart from the Chart data and update it on the canvas\r\n   private buildChart(chartData: Chart): void {\r\n      this.chart = chartData;\r\n      this.chart.update();\r\n   }\r\n\r\n   // destroy the chart if it is not null\r\n   private destroyChart(): void {\r\n      if (this.chart != null) {\r\n         this.chart.destroy();\r\n      }\r\n   }\r\n\r\n   // use graph service to download the chart given an event\r\n   download(event) {\r\n      this.graphService.downloadChart(event, 'canvas');\r\n   }\r\n\r\n   // set the single state button to disabled or not disabled\r\n   buttonStateSingle(): boolean {\r\n      return this.currentDatasetType == 'single' ? true : false;\r\n   }\r\n   // set the multiple state button to disabled or not disabled\r\n   buttonStateMultiple(): boolean {\r\n      return this.currentDatasetType == 'multiple' ? true : false;\r\n   }\r\n\r\n   // update the dataset switch to single or multiple\r\n   updateMultipleDataSetForm(val) {\r\n      this.currentDatasetType = val;\r\n   }\r\n\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pages/graphs/graphs.component.ts","import { OnInit, Component, AfterViewInit, ChangeDetectorRef } from \"@angular/core\";\r\nimport { Globals } from \"../../globals\";\r\nimport { GraphService } from '../../services/graph.service';\r\nimport { SurveyService } from 'app/services/survey.service';\r\nimport { SurveyInfo } from '../../models/surveyInfo.model';\r\nimport { Question } from '../../models/question.model';\r\nimport { Option } from '../../models/option.model';\r\nimport { Responses } from '../../models/responseExport.model';\r\n\r\n@Component({\r\n   selector: 'home',\r\n   templateUrl: './home.component.html',\r\n   styleUrls: ['./home.component.css'],\r\n   providers: [SurveyService]\r\n})\r\nexport class HomeComponent implements OnInit {\r\n   constructor(\r\n      public globals: Globals,\r\n      public graphService: GraphService,\r\n      public surveyService: SurveyService,\r\n      private changeref: ChangeDetectorRef \r\n   ){ }\r\n\r\n   canvas: any;\r\n      // canvas context\r\n   ctx: any;\r\n      // chart object\r\n   chart: Chart = null;\r\n      // Holds the dynamic survey variables for display\r\n   surveys: Array<any> = [];\r\n   showHomeDiv: boolean = false;\r\n   showInfo: boolean = false;\r\n\r\n   ngOnInit() {\r\n      this.canvas = document.getElementById('graphCanvas');\r\n      this.ctx = this.canvas.getContext('2d');\r\n      this.surveyService.getAllSurveys().subscribe((response) => {\r\n         // Get 1 survey at a time and push into surveys array\r\n         for (let i = 0; i < response.body.length; i++) {\r\n               let survey: SurveyInfo = {\r\n                     \"survey_id\": response.body[i].survey_id,\r\n                     \"survey_name\": response.body[i].survey_name,\r\n                     \"date_created\": response.body[i].date_created.split(\" \")[0],\r\n                     \"survey_is_active\": response.body[i].survey_is_active\r\n               };\r\n \r\n               this.surveys.push(survey);\r\n               // Get the survey questions by selectedSurveyId\r\n               this.surveyService.getAllSurveyQuestions(this.surveys[i].survey_id).subscribe((response)=>{\r\n                     // Initialize the questions\r\n                     this.surveys[i].questions = [];\r\n                     // Iterate through the questions and push them one at a time\r\n                     for (let j = 0; j < response.body.length; j++) {\r\n                           let question: Question = {\r\n                                 \"question_id\": response.body[j].question_id,\r\n                                 \"question_text\": response.body[j].question_text,\r\n                                 \"question_type\": response.body[j].question_type,\r\n                                 \"question_is_active\": response.body[j].question_is_active,\r\n                                 options: []\r\n                           };\r\n                           this.surveys[i].questions.push(question);\r\n                     }\r\n                  \r\n                        // Manually detect changes as the page will load faster than the async call\r\n                        this.changeref.detectChanges();\r\n                        this.surveyService.getSurveyResponses(this.surveys[i].survey_id).subscribe((response) => {\r\n                           \r\n                           for (let k = 0; k < this.surveys[i].questions.length; k++) {\r\n                              // initialize the responses\r\n                              this.surveys[i].questions[k].responses = [];\r\n                                 for (let l = 0; l < response.body.length; l++) {\r\n                                       let response1: Responses = {\r\n                                             \"response_id\": response.body[l].response_id,\r\n                                             \"survey_id\": response.body[l].survey_id,\r\n                                             \"question_id\": response.body[l].question_id,\r\n                                             \"option_id\": response.body[l].option_id,\r\n                                             \"response_text\": response.body[l].response_text,\r\n                                             \"date_taken\": response.body[l].date_taken.split(\" \")[0],\r\n                                             \"survey_hash\": response.body[l].survey_hash\r\n                                       };\r\n                                       // If the question IDs match, push the response into the questions[j].responses array\r\n                                       if (this.surveys[i].questions[k].question_id == response.body[l].question_id) {\r\n                                             this.surveys[i].questions[k].responses.push(response1);\r\n                                       }\r\n                                 }\r\n                           }\r\n                           \r\n                           // Manually detect changes as the page will load faster than the async call\r\n                           this.changeref.detectChanges();\r\n                           if(i == this.surveys.length -1){\r\n                           this.showHomeDiv = true;\r\n                           this.showInfo = true;\r\n                           this.updateChart();\r\n                           }\r\n                     }, (error) => {\r\n                           console.log('error is ', error)\r\n                     })\r\n               \r\n                     // Manually detect changes as the page will load faster than the async call\r\n                     this.changeref.detectChanges();\r\n               },(error) => {\r\n                     console.log('error is ', error)\r\n               })\r\n               // Manually detect changes as the page will load faster than the async call\r\n               this.changeref.detectChanges();\r\n            } \r\n         }, (error) => {\r\n            console.log('error is ', error)\r\n      })\r\n   }\r\n\r\n   ngAfterViewInit() {\r\n   };\r\n\r\n   // Updates survey, changing it's active status\r\n   updateActiveSurvey(val): void {\r\n      // Checks if survey is currently active\r\n      if(this.surveys[val].survey_is_active == true){\r\n         if(confirm(\"Are you sure you want to change the survey to inactive?\")){\r\n         this.surveys[val].survey_is_active = false;\r\n            let survey = {\r\n               \"survey_id\": this.surveys[val].survey_id,\r\n               \"survey_is_active\": this.surveys[val].survey_is_active\r\n            }\r\n         this.surveyService.updateSurveyActive(survey).subscribe();\r\n         }\r\n      }\r\n      // Checks if survey is currently inactive\r\n      else if(this.surveys[val].survey_is_active == false){\r\n         if(confirm(\"Are you sure you want to change the survey to active?\")){\r\n         this.surveys[val].survey_is_active = true;\r\n            let survey = {\r\n               \"survey_id\": this.surveys[val].survey_id,\r\n               \"survey_is_active\": this.surveys[val].survey_is_active\r\n            }\r\n         this.surveyService.updateSurveyActive(survey).subscribe();\r\n         }\r\n      }\r\n   }\r\n\r\n   // Builds chart with survey date data\r\n   updateChart(): void {\r\n      this.destroyChart();\r\n      let c: Chart = this.graphService.createDateChart(this.ctx, \"line\", this.DateGraphData())\r\n      this.buildChart(c)\r\n      }\r\n\r\n   private destroyChart(): void {\r\n      if (this.chart != null) {\r\n            this.chart.destroy();\r\n      }\r\n   }\r\n\r\n   // go through the surveys and get the info for the survey details card\r\n   getSurveyInfo(): any[] {\r\n      let surveyDetails: any[] = [];\r\n      this.surveys.forEach(survey => {\r\n         let submissionCount = 0;\r\n         // get the number of responses on each question of the survey\r\n         survey.questions.map(q => { submissionCount += q.responses.length });\r\n         // push details to array\r\n         surveyDetails.push({\r\n            survey_id: survey.survey_id,\r\n            name: survey.survey_name,\r\n            date: survey.date_created,\r\n            status: survey.survey_is_active,\r\n            // round down the operation of the the total submissions divided by the number of questions, parse to string for formatting\r\n            submissions: Math.round(submissionCount / survey.questions.length).toLocaleString(),\r\n         })\r\n      });\r\n      return surveyDetails;\r\n   }\r\n\r\n   private buildChart(chartData: Chart): void {\r\n      this.chart = chartData;\r\n      this.chart.update();\r\n   }\r\n   \r\n   // Map a surveys dates and count how much surveys were taken per that date\r\n   mapDateData(val): Map<string, number> {\r\n      let map = new Map();\r\n      let survey = this.surveys[val];\r\n      let qid = survey.questions[0].question_id;\r\n      survey.questions.forEach(question => {\r\n         if (question.question_id == qid) {\r\n            question.responses.forEach(r => {\r\n               let testdate = new Date(r.date_taken);\r\n               if (testdate >= this.getDateYearAgo()){\r\n                  if (map.has(r.date_taken)) {\r\n                     let count = map.get(r.date_taken);\r\n                     // increment count by 1\r\n                     count += 1;\r\n                     map.set(r.date_taken, count);\r\n                  }\r\n                  else {\r\n                     map.set(r.date_taken, 1);\r\n                  }\r\n               }\r\n            });\r\n         }\r\n      });\r\n      return map;\r\n   }\r\n   \r\n   // Push all the surveys information into a datasets array\r\n   mapDateDataSets(): any[] {\r\n      let datasets: any[] = new Array();\r\n         for(let v = 0; v < this.surveys.length; v++){\r\n            // push the dataset values\r\n            datasets.push({\r\n               label: this.surveys[v].survey_name,\r\n               data: this.mapDataForSurvey(v),\r\n               backgroundColor: this.graphService.getColorByIndex(v),\r\n               borderColor: this.graphService.getColorByIndex(v),\r\n               fill: false\r\n            })\r\n         };\r\n      return datasets;\r\n   }\r\n\r\n   // Push all the current surveys date data to data array\r\n   mapDataForSurvey(val): any[] {\r\n      let data: any[] = new Array();\r\n      let a = Array.from(this.mapDateData(val).keys());\r\n      let b = Array.from(this.mapDateData(val).values());\r\n\r\n      let survey = this.surveys[val];\r\n\r\n      // Push the values with the labels to the datasets\r\n      for(let r=0; r <= survey.questions[0].responses.length; r++){\r\n         data.push({\r\n            x: a[r],\r\n            y: b[r]\r\n         })\r\n\r\n      }\r\n      return data\r\n   }\r\n\r\n\r\n   // pulls together the above functions to set the labels and datasets for the matrix graph\r\n   DateGraphData(): any {\r\n      return {\r\n         datasets: this.mapDateDataSets()\r\n      }\r\n   }\r\n\r\n   // Get date from exactly one year ago to make sure that only surveys taken in the past year are graphed\r\n   private getDateYearAgo(): any {\r\n      let today = new Date();\r\n      let d = today.getDate();\r\n      let m = today.getMonth() + 1;\r\n      let yyyy = today.getFullYear() - 1;\r\n      let mm: string;\r\n      let dd: string;\r\n      if(d < 10) {\r\n         dd = '0' + d;\r\n      }\r\n      else{\r\n         dd = '' + d;\r\n      }\r\n      if(m < 10) {\r\n         mm = '0' + m;\r\n      }\r\n      else{\r\n         mm = '' + m;\r\n      }\r\n      let today1 = new Date(yyyy + '-' + mm + '-' + dd);\r\n      return today1;\r\n   }\r\n   \r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pages/home/home.component.ts","import { Component, OnInit } from '@angular/core';\r\nimport { Globals } from '../../globals';\r\nimport { FormBuilder, FormGroup, FormArray, FormControl, FormControlName } from '@angular/forms';\r\n\r\n@Component({\r\n   selector: 'app-input',\r\n   templateUrl: './input.component.html',\r\n   styleUrls: ['./input.component.css']\r\n})\r\nexport class InputComponent implements OnInit {\r\n   \r\n   constructor(public globals: Globals) { };\r\n\r\n   survey;\r\n\r\n   ngOnInit() {\r\n\r\n   }\r\n   \r\n   updateSurvey(sid){\r\n\r\n   }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pages/input/input.component.ts","import { Component} from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  templateUrl: './not-found.component.html',\r\n  styleUrls: ['./not-found.component.css']\r\n})\r\nexport class NotFoundComponent {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pages/not-found/not-found.component.ts","//import { Globals } from './../../globals';\r\nimport { Component, ChangeDetectionStrategy, DoCheck, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { PaginationInstance } from 'ngx-pagination';\r\nimport { SurveyService } from '../../services/survey.service';\r\nimport { AuthenticationService } from '../../services/authentication.service';\r\nimport { Question } from '../../models/question.model';\r\nimport { Response } from '../../models/response.model';\r\nimport { Option } from '../../models/option.model';\r\nimport { SurveyInfo } from 'app/models/surveyInfo.model';\r\n\r\n@Component({\r\n  selector: 'app-survey',\r\n  templateUrl: './survey.component.html',\r\n  styleUrls: ['./survey.component.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [SurveyService]\r\n})\r\n\r\nexport class SurveyComponent implements OnInit, DoCheck {\r\n\r\n  /* \r\n      Variables for the Survey Component\r\n  */\r\n\r\n  // Shows the survey div when true\r\n  showSurveyDiv: boolean = false;\r\n  // Holds the dynamic survey variables for display\r\n  surveys: Array<any> = [];\r\n  // Survey variables set by surveySelect()\r\n  selectedSurveyId: number;\r\n  selectedSurveyIndex: number;\r\n  // Option_id that is set by optionSelect()\r\n  selectedOption: number;\r\n  // Fills when multiple choices are selected by updateResponses()\r\n  checkboxChoices: Array<any> = [];\r\n  // Pushes/pops when user selects next or previous\r\n  surveyData: Array<any> = [];\r\n  // Unique user hash\r\n  currentUser: string;\r\n  // Pagination element uses this\r\n  public config: PaginationInstance = {\r\n    id: 'custom',\r\n    itemsPerPage: 1,\r\n    currentPage: 1\r\n  };\r\n\r\n  // Declare the imports to be used within the component\r\n  constructor(public surveyService: SurveyService,\r\n              public auth: AuthenticationService,\r\n              private changeref: ChangeDetectorRef) { }\r\n\r\n  /*\r\n      Survey Landing/Home page functions\r\n  */\r\n\r\n  // This continuously checks if the user is authenticated\r\n  ngDoCheck(): void {\r\n    // If authenticated, redirect to the home dashboard\r\n    if (!this.auth.isAuthenticated) {\r\n      //this.router.navigate(['home']);\r\n    }\r\n  }\r\n\r\n  // On component initialization, get the survey ids, names, and date created\r\n  ngOnInit(): void {\r\n    this.surveyService.getActiveSurveys().subscribe(response => {\r\n        // Get 1 survey at a time and push into surveys array\r\n        for (let i = 0; i < response.body.length; i++) {\r\n          let survey: SurveyInfo = {\r\n                \"survey_id\": response.body[i].survey_id,\r\n                \"survey_name\": response.body[i].survey_name,\r\n                \"date_created\": response.body[i].date_created,\r\n                \"survey_is_active\": response.body[i].survey_is_active\r\n          };\r\n          this.surveys.push(survey);\r\n        }\r\n        this.changeref.detectChanges();\r\n    }, (error) => {\r\n      console.log('error is ', error)\r\n    })\r\n  }\r\n\r\n  // When a user clicks a survey in the dropdown, save the selectedSurveyId\r\n  surveySelect($event, value) {\r\n    this.selectedSurveyId = value;\r\n    for (let i = 0; i < this.surveys.length; i++) {\r\n      if (this.selectedSurveyId == this.surveys[i].survey_id) {\r\n        this.selectedSurveyIndex = i;\r\n      }\r\n    }\r\n  }\r\n\r\n  generateUUID(): string {\r\n    var d = new Date().getTime();\r\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function'){\r\n        d += performance.now(); //use high-precision timer if available\r\n    }\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = (d + Math.random() * 16) % 16 | 0;\r\n        d = Math.floor(d / 16);\r\n        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\r\n    });\r\n  }\r\n\r\n  // When the user clicks start, get the survey questions and options based on the survey id\r\n  onStart(): void {\r\n    // set survey div to true to be displayed\r\n    this.showSurveyDiv = true;\r\n    // Generate unique user hash\r\n    this.currentUser = this.generateUUID();\r\n    // Get the survey questions by selectedSurveyId\r\n    this.surveyService.getActiveSurveyQuestions(this.selectedSurveyId).subscribe(response => {\r\n      // Initialize the questions\r\n      this.surveys[this.selectedSurveyIndex].questions = [];\r\n      // Iterate through the questions and push them one at a time\r\n      for (let i = 0; i < response.body.length; i++) {\r\n        let question: Question = {\r\n              \"question_id\": response.body[i].question_id,\r\n              \"question_text\": response.body[i].question_text,\r\n              \"question_type\": response.body[i].question_type,\r\n              \"question_is_active\": response.body[i].question_is_active,\r\n              options: []\r\n        };\r\n        this.surveys[this.selectedSurveyIndex].questions.push(question);\r\n      }\r\n      this.changeref.detectChanges();\r\n      \r\n      // Get the survey options based on the selectedSurveyId\r\n      this.surveyService.getActiveSurveyOptions(this.selectedSurveyId).subscribe(response => {\r\n        for (let j = 0; j < this.surveys[this.selectedSurveyIndex].questions.length; j++) {\r\n          for (let k = 0; k < response.body.length; k++) {\r\n            let option: Option = {\r\n                  \"option_id\": response.body[k].option_id,\r\n                  \"option_text\": response.body[k].option_text,\r\n                  \"option_is_active\": response.body[k].option_is_active,\r\n                  \"question_id\": response.body[k].question_id\r\n            };\r\n            // If the question IDs match, push the option into the questions[j].options array\r\n            if (this.surveys[this.selectedSurveyIndex].questions[j].question_id == response.body[k].question_id) {\r\n              this.surveys[this.selectedSurveyIndex].questions[j].options.push(option);\r\n            }\r\n          }\r\n        }\r\n        this.changeref.detectChanges();\r\n      }, (error) => {\r\n        console.log('error is ', error)\r\n      }) \r\n    },(error) => {\r\n      console.log('error is ', error)\r\n    })\r\n  }\r\n\r\n  /*\r\n      Survey Functions\r\n  */\r\n\r\n  // When next button is clicked, save the selected options to the survey data object\r\n  updateResponses(textValue: string, questionIndex: number) {\r\n    // Response object mirrors the database response table\r\n    let response: Response = {\r\n          survey_id: 0,\r\n          question_id: 0,\r\n          option_id: 0,\r\n          response_text: \"\",\r\n          survey_hash: this.currentUser\r\n    };\r\n    \r\n    // If question type is select or multiple choice, only need to add 1 response\r\n    if (this.surveys[this.selectedSurveyIndex].questions[questionIndex].question_type == \"select\" ||\r\n        this.surveys[this.selectedSurveyIndex].questions[questionIndex].question_type == \"radio\") {\r\n          // Initialize values to prevent duplication\r\n          response = { \r\n            survey_id: 0,\r\n            question_id: 0,\r\n            option_id: 0,\r\n            response_text: \"\",\r\n            survey_hash: this.currentUser\r\n          };\r\n\r\n          response.survey_id = this.selectedSurveyId; // Survey ID\r\n          response.question_id = this.surveys[this.selectedSurveyIndex].questions[questionIndex].question_id; // Question ID\r\n          response.option_id = this.selectedOption; // Option ID\r\n          response.response_text = this.getResponseText(this.selectedOption, questionIndex); // Response text\r\n          // Push to survey data array\r\n          console.log(\"pushing to surveyData: \" + this.selectedOption);\r\n          this.surveyData.push(response);\r\n    // If question type is checkbox, check for multiple responses\r\n    } else if (this.surveys[this.selectedSurveyIndex].questions[questionIndex].question_type == \"checkbox\") {\r\n      // Iterate through the options that were selected\r\n      for (let i = 0; i < this.checkboxChoices.length; i++) {\r\n        // Initialize response to prevent duplication\r\n          response = { \r\n          survey_id: 0,\r\n          question_id: 0,\r\n          option_id: 0,\r\n          response_text: \"\",\r\n          survey_hash: this.currentUser\r\n        };\r\n\r\n        response.survey_id = this.selectedSurveyId; // Survey ID\r\n        response.question_id = this.surveys[this.selectedSurveyIndex].questions[questionIndex].question_id; // Question ID\r\n        response.option_id = this.checkboxChoices[i]; // Option ID\r\n        response.response_text = this.getResponseText(this.checkboxChoices[i], questionIndex); // Response text\r\n        console.log(\"pushing to surveyData: \" + this.checkboxChoices[i]);\r\n        // Push to survey data array\r\n        this.surveyData.push(response);\r\n      }\r\n      // Initialize checkboxChoices\r\n      this.checkboxChoices = [];\r\n    // If question type is text (open-ended), set option id to 1\r\n    } else if (this.surveys[this.selectedSurveyIndex].questions[questionIndex].question_type == \"text\") {\r\n      // Initialize response to prevent duplication\r\n      response = { \r\n        survey_id: 0,\r\n        question_id: 0,\r\n        option_id: 0,\r\n        response_text: \"\",\r\n        survey_hash: this.currentUser\r\n      };\r\n\r\n      response.survey_id = this.selectedSurveyId; // Survey ID\r\n      response.question_id = this.surveys[this.selectedSurveyIndex].questions[questionIndex].question_id; // Question ID\r\n      response.option_id = this.surveys[this.selectedSurveyIndex].questions[questionIndex].options[0].option_id; // Option ID\r\n      response.response_text = textValue; // Response text\r\n\r\n      console.log(\"pushing to surveyData: \" + textValue);\r\n      this.surveyData.push(response);\r\n    }\r\n    console.log(this.surveyData);\r\n  }\r\n\r\n  // This is called to find the selected options within the HTML\r\n  optionSelect(event, value, questionType): void {\r\n    // If question type is select or multiple choice, there is only 1 selected value\r\n    if (questionType == \"select\" || questionType == \"radio\") {\r\n      this.selectedOption = value;\r\n    // If question type is checkbox, there is 1+ options\r\n    } else if (questionType == \"checkbox\") {\r\n      // event is the clicked HTML element\r\n      if (event) {\r\n        // If checked, add it to the checkboxChoice array\r\n        if (event.target.checked) {\r\n          this.checkboxChoices.push(value);\r\n        // If unchecked, remove it from the checkboxChoice array\r\n        } else {\r\n          // Iterate through the checkbox choices to see which matches the value\r\n          for (let i = 0; i < this.checkboxChoices.length; i++) {\r\n            // If it matches, remove it from checkboxChoice array\r\n            if (this.checkboxChoices[i] == value) {\r\n              this.checkboxChoices.splice(i, 1);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Returns the option text as the response_text\r\n  getResponseText(optionId, questionIndex): string {\r\n    // Iterate through the question's options\r\n    for (let option of this.surveys[this.selectedSurveyIndex].questions[questionIndex].options) {\r\n      if (optionId == option.option_id) {\r\n        console.log(\"Matched option text: \" + option.option_text);\r\n        return option.option_text;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Gets called\r\n  getQuestionIndex(questionId): number {\r\n    for (let i = 0; i < this.surveys[this.selectedSurveyIndex].questions.length; i++) {\r\n      if (questionId == this.surveys[this.selectedSurveyIndex].questions[i].question_id) {\r\n        return i;\r\n      }\r\n    };\r\n  }\r\n\r\n  // Gets called when previous button is clicked\r\n  removeResponse(questionIndex: number, currentPage: number) {\r\n    if (this.surveys[this.selectedSurveyIndex].questions[questionIndex].question_type == \"checkbox\") {\r\n      // Pop 1 for each response in surveyData that matches the current question ID\r\n      for (let i = this.surveyData.length - 1; i > 0; i--) {\r\n        if (this.surveyData[i].question_id == this.surveys[this.selectedSurveyIndex].questions[questionIndex].question_id) {\r\n          this.surveyData.pop();\r\n        }\r\n      }\r\n      console.log(this.surveyData);\r\n    // If question type is text (open-ended), multiple choice, or dropdown/select, pop 1\r\n    } else {\r\n      this.surveyData.pop();\r\n    }\r\n  }\r\n\r\n  // When submit button is hit, this will post the survey data to the database\r\n  postOnSubmit() {\r\n    // Post the surveyData array to the API\r\n    this.surveyService.postSurveyResponse(this.surveyData).subscribe();\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pages/survey/survey.component.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 389;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 389\n// module chunks = 1","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));  // Added by Survey builder. be cautious\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { Component, OnInit } from '@angular/core';\nimport { SurveyService } from './services/survey.service';\n\nvar Surveys: Array<any> = [{ survey_id: 2, question_id: 1, question_num: 1, question_text: \"What services do you need?\", question_is_active: \"true\", question_type: \"checkbox\", option_id: 1, option_num: 1, option_text: \"money\", option_is_active: \"true\" },\n{ survey_id: 2, question_id: 2, question_num: 2, question_text: \"What city are you from?\", question_type: \"select\", option_id: 2, option_num: 1, option_text: \"Beacon\", option_is_active: \"true\" },\n{ survey_id: 2, question_id: 3, question_num: 3, question_text: \"Additional comments:\", question_type: \"text\", option_id: 3, option_num: 1, option_text: \"nope\", option_is_active: \"true\" },\n{ survey_id: 2, question_id: 4, question_num: 4, question_text: \"How can this survey be better?\", question_type: \"text\", option_id: 4, option_num: 1, option_text: \"by being over\", option_is_active: \"true\" },\n{ survey_id: 2, question_id: 5, question_num: 5, question_text: \"In a few words, describe capping:\", question_type: \"text\", option_id: 5, option_num: 1, option_text: \"a class you must take to graduate and gain experience\", option_is_active: \"true\" }];\n\nvar Updates: Array<any> = [{ survey_id: 2, question_id: 1, question_num: 1, question_text: \"What services do you need?\", question_is_active: \"true\", question_type: \"checkbox\", option_id: 1, option_num: 1, option_text: \"money\", option_is_active: \"true\" },\n{ survey_id: 2, question_id: 2, question_num: 2, question_text: \"What city are you from?\", question_type: \"select\", option_id: 2, option_num: 1, option_text: \"Beacon\", option_is_active: \"true\" },\n{ survey_id: 2, question_id: 3, question_num: 3, question_text: \"Additional comments:\", question_type: \"text\", option_id: 3, option_num: 1, option_text: \"nope\", option_is_active: \"true\" },\n{ survey_id: 2, question_id: 4, question_num: 4, question_text: \"How can this survey be better?\", question_type: \"text\", option_id: 4, option_num: 1, option_text: \"by being over\", option_is_active: \"true\" },\n{ survey_id: 2, question_id: 5, question_num: 5, question_text: \"In a few words, describe capping:\", question_type: \"text\", option_id: 5, option_num: 1, option_text: \"a class you must take to graduate and gain experience\", option_is_active: \"true\" }];\n\nvar FormValues = {\n  SurveyName: \"Lindas Survey\",\n  questions: [\n    {\n      questionText: \"What is your favorite City?\",\n      questionType: \"mc\",\n      questionOptions: [\n        {\n          option: \"New York City\"\n        },\n        {\n          option: \"Boston\"\n        },\n        {\n          option: \"Washington\"\n        },\n        {\n          option: \"Miami\"\n        },\n        {\n          option: \"Poughkeepsie\"\n        }\n      ]\n\n    },\n    {\n      questionText: \"Select the services that ou need: \",\n      questionType: \"checkboxes\",\n      questionOptions: [\n        {\n          option: \"More Money\"\n        },\n        {\n          option: \"More Time\"\n        },\n        {\n          option: \"More Clothes\"\n        },\n        {\n          option: \"Less Capping Work\"\n        }\n      ]\n    }]\n}\n\nvar FormValues1 = {\n  SurveyID: 1,\n  SurveyName: \"Lindas Survey\",\n  questions: [\n    {\n      questionID: 5,\n      questionText: \"What is your favorite City?\",\n      questionIsActive: true,\n      questionType: \"mc\",\n      questionOptions: [\n        {\n          optionID: 5,\n          option: \"New York City\",\n          option_is_active: true\n        },\n        {\n          optionID: 7,\n          option: \"Boston\",\n          option_is_active: true\n        },\n        {\n          optionID: 8,\n          option: \"Washington\",\n          option_is_active: true\n        },\n        {\n          optionID: \"\",\n          option: \"Miami\",\n          option_is_active: true\n        },\n        {\n          optionID: 10,\n          option: \"Poughkeepsie\",\n          option_is_active: true\n        }\n      ]\n\n    },\n    {\n      questionID: \"\",\n      questionText: \"Select the services that ou need: \",\n      questionIsActive: true,\n      questionType: \"checkboxes\",\n      questionOptions: [\n        {\n          optionID: 1,\n          option: \"More Money\",\n          option_is_active: true\n        },\n        {\n          optionID: 2,\n          option: \"More Time\",\n          option_is_active: false\n        },\n        {\n          optionID: 3,\n          option: \"More Clothes\",\n          option_is_active: true\n        },\n        {\n          optionID: \"\",\n          option: \"Less Capping Work\",\n          option_is_active: true\n        }\n      ]\n    }]\n}\nfunction wait(ms): void {\n  var start = new Date().getTime();\n  var end = start;\n  while (end < start + ms) {\n    end = new Date().getTime();\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  providers: [SurveyService]\n})\n\nexport class AppComponent {\n\n  public questions: Array<any>;\n  public results: Array<any>;\n  public options: Array<any>;\n  public responses: Array<any>;\n  public surveys: Array<any>;\n  public updates: Array<any>;\n  questionID;\n  optionID;\n  surveyID;\n  questionNum;\n\n  constructor(private surveyService: SurveyService) { }\n  /*\n  getResponses(id) {\n    this.surveyService.getSurveyResponses(id).subscribe((response) => {\n\n      for (let j = 0; j < this.globals.surveys.length; j++) {\n\n\n        if (this.globals.surveys[j].survey_id == id) {\n\n          for (let k = 0; k < this.globals.surveys[j].questions.length; k++) {\n\n\n            for (let i = 0; i < response.length; i++) {\n\n              let rArray =\n              {\n\n                \"response_id\": response[i].response_id,\n                \"survey_id\": response[i].survey_id,\n                \"question_id\": response[i].question_id,\n                \"option_id\": response[i].option_id,\n                \"response_text\": response[i].response_text,\n                \"date_taken\": response[i].date_taken\n              };\n\n              if (this.globals.surveys[j].questions[k].question_id == response[i].question_id) {\n                this.globals.surveys[j].questions[k].responses.push(rArray);\n                console.log(this.globals.surveys[j].questions[k].responses);\n              }\n            }\n          }\n        }\n      }\n    }, (error) => {\n      console.log('error is ', error)\n    })\n  }*/\n  /*\n  ngOnInit() {\n\n    this.surveyService.getQuestionLength().subscribe((response) => {\n      this.questionID = response[0];\n      this.surveyService.getOptionLength().subscribe((value) => {\n        this.optionID = value[0];\n        this.surveyService.getSurveyLength().subscribe((data) => {\n          this.surveyID = data[0];\n          this.surveyID = this.surveyID + 1;\n          let insertSurveyID = { \"survey_name\": FormValues.SurveyName };\n          this.surveyService.postSurveyName(insertSurveyID).subscribe((response) => {\n          }, (error) => {\n            console.log('error is ', error)\n          });\n          wait(50);\n          for (let j = 0; j < FormValues.questions.length; j++) {\n            this.questionID = this.questionID + 1;\n            wait(50);\n            let insertQuestionsArray = { \n              \"question_text\": FormValues.questions[j].question_text, \n              \"question_type\": FormValues.questions[j].question_type \n            };\n            wait(50);\n            this.surveyService.postQuestionID(insertQuestionsArray).subscribe((response) => {\n            }, (error) => {\n              console.log('error is ', error)\n            });\n            for (let i = 0; i < FormValues.questions[j].questionOptions.length; i++) {\n              this.optionID = this.optionID + 1;\n              let insertOptionIDArray = { \"option_text\": FormValues.questions[j].questionOptions[i].option, \"question_id\": this.questionID }\n              wait(50);\n              this.surveyService.postOptionID(insertOptionIDArray).subscribe((response) => {\n              }, (error) => {\n                console.log('error is ', error)\n              });\n              let insertArchitecturesArray = { \"survey_id\": this.surveyID, \"question_id\": this.questionID, \"option_id\": this.optionID };\n              wait(50);\n              this.surveyService.postArchitectures(insertArchitecturesArray).subscribe((response) => {\n              }, (error) => {\n                console.log('error is ', error)\n              })\n            }\n          }\n        }, (error) => {\n          console.log('error is ', error)\n        })\n      }, (error) => {\n        console.log('error is ', error)\n      })\n    }, (error) => {\n      console.log('error is ', error)\n    })\n\n   /* function f(object: some)\n    this.surveyService.getQuestionLength().subscribe((response) => {\n      this.questionID = response[0];\n\n      this.surveyService.getOptionLength().subscribe((value) => {\n        this.optionID = value[0];\n\n        this.surveyService.getSurveyLength().subscribe((data) => {\n          this.surveyID = data[0];\n          for (let i = 0; FormValues1.questions.length; i++) {\n            if (FormValues1.questions[i].questionID == \"\") {\n              this.questionID = this.questionID + 1;\n              let insertUpdateQuestion = { \"question_text\": FormValues1.questions[i].questionText, \"question_type\": FormValues1.questions[i].questionType };\n              wait(50);\n              this.surveyService.postQuestionID(insertUpdateQuestion).subscribe((response) => {\n              }, (error) => {\n                console.log('error is ', error)\n              });\n              for (let j = 0; FormValues1.questions[i].questionOptions.length; j++) {\n                this.optionID = this.optionID + 1;\n                let insertUpdateOption = { \"option_text\": FormValues1.questions[i].questionOptions[j].option, \"question_id\": this.questionID };\n                this.surveyService.postOptionID(insertUpdateOption).subscribe((response) => {\n                }, (error) => {\n                  console.log('error is ', error)\n                });\n                let insertUpdateArchitectures = { \"survey_id\": FormValues1.SurveyID, \"question_id\": this.questionID, \"option_id\": this.optionID };\n                this.surveyService.postArchitectures(insertUpdateArchitectures).subscribe((response) => {\n                }, (error) => {\n                  console.log('error is ', error)\n                });\n              }\n            }\n            if (FormValues1.questions[i].questionID != \"\") {\n              let updateQuestion = {\n                \"question_id\": FormValues1.questions[i].questionID, \"question_text\": FormValues1.questions[i].questionText, \"question_is_active\": FormValues1.questions[i].questionIsActive, \"question_type\": FormValues1.questions[i].questionType\n              };\n              this.surveyService.updateSurveyQuestion(updateQuestion).subscribe((response) => {\n              }, (error) => {\n                console.log('error is ', error)\n              });\n              for (let j = 0; FormValues1.questions[i].questionOptions.length; j++) {\n                if (FormValues1.questions[i].questionOptions[j].optionID == \"\") {\n                  this.optionID = this.optionID + 1;\n                  let insertOption = { \"option_text\": FormValues1.questions[i].questionOptions[j].option, \"question_id\": FormValues1.questions[i].questionID }; \n                  this.surveyService.postOptionID(insertOption).subscribe((response) => {\n                  }, (error) => {\n                    console.log('error is ', error)\n                  });\n                  let insertArchitectures = {\n                    \"survey_id\": FormValues1.SurveyID, \"question_id\": FormValues1.questions[i].questionID, \"option_id\": this.optionID\n                  }\n                  this.surveyService.postArchitectures(insertArchitectures).subscribe((response) => {\n                  }, (error) => {\n                    console.log('error is ', error)\n                  });\n                }\n                if (FormValues1.questions[i].questionOptions[j].optionID != \"\") {\n                  let insertOption = { \"option_id\": FormValues1.questions[i].questionOptions[j].optionID, \"option_is_active\": FormValues1.questions[i].questionOptions[j].option_is_active };\n                  this.surveyService.updateSurveyOption(insertOption).subscribe((response) => {\n                  }, (error) => {\n                    console.log('error is ', error)\n                  });\n                }\n              }\n            }\n          }\n        }, (error) => {\n          console.log('error is ', error)\n        })\n      }, (error) => {\n        console.log('error is ', error)\n      })\n    }, (error) => {\n      console.log('error is ', error)\n    })\n    }*/\n    /*\n        for (let j = 0; j < Updates.length; j++) {\n          if (Updates[j].question_id = '') {\n            this.surveyService.insertSurveyQuestions(Updates[j]).subscribe((response) => {\n              this.updates = [];\n              //console.log('response is ', response);\n              for (let i = 0; i < response.length; i++) {\n    \n                let mArray =\n                {\n                  \"question_num\": response[i].question_num,\n                  \"question_text\": response[i].question_text,\n                  \"question_is_active\": response[i].question_is_active,\n                  \"question_type\": response[i].question_type,\n                  \"option_id\": response[i].option_id,\n                  \"option_num\": response[i].option_num,\n                  \"option_text\": response[i].option_text,\n                  \"option_is_active\": response[i].option_is_active\n                }\n                  ;\n                this.updates.push(mArray);\n    \n              }\n              console.log(this.updates);\n            }, (error) => {\n              console.log('error is ', error)\n            })\n          }\n          if (Updates[j].question_id != '') {\n            this.surveyService.updateSurveyQuestions(Updates[j]).subscribe((response) => {\n              this.updates = [];\n              //console.log('response is ', response);\n              for (let i = 0; i < response.length; i++) {\n    \n                let dArray =\n                {\n                  \"question_id\": response[i].question_id,\n                  \"question_num\": response[i].question_num,\n                  \"question_text\": response[i].question_text,\n                  \"question_is_active\": response[i].question_is_active,\n                  \"question_type\": response[i].question_type,\n                  \"option_id\": response[i].option_id,\n                  \"option_num\": response[i].option_num,\n                  \"option_text\": response[i].option_text,\n                  \"option_is_active\": response[i].option_is_active,\n                  \"response_id\": response[i].response_id,\n                  \"survey_id\": response[i].survey_id\n                }\n                  ;\n                this.updates.push(dArray);\n    \n              }\n              console.log(this.updates);\n            }, (error) => {\n              console.log('error is ', error)\n            })\n          }\n        }*/\n  \n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.component.ts","/*\n * Inspinia js helpers:\n *\n * correctHeight() - fix the height of main wrapper\n * detectBody() - detect windows size\n * smoothlyMenu() - add smooth fade in/out on navigation show/ide\n *\n*/\n\ndeclare var jQuery:any;\n\nexport function correctHeight() {\n\n    var pageWrapper = jQuery('#page-wrapper');\n    var navbarHeigh = jQuery('nav.navbar-default').height();\n    var wrapperHeigh = pageWrapper.height();\n\n    if (navbarHeigh > wrapperHeigh) {\n        pageWrapper.css(\"min-height\", navbarHeigh + \"px\");\n    }\n\n    if (navbarHeigh < wrapperHeigh) {\n        if (navbarHeigh < jQuery(window).height()) {\n            pageWrapper.css(\"min-height\", jQuery(window).height() + \"px\");\n        } else {\n            pageWrapper.css(\"min-height\", navbarHeigh + \"px\");\n        }\n    }\n\n    if (jQuery('body').hasClass('fixed-nav')) {\n        if (navbarHeigh > wrapperHeigh) {\n            pageWrapper.css(\"min-height\", navbarHeigh + \"px\");\n        } else {\n            pageWrapper.css(\"min-height\", jQuery(window).height() - 60 + \"px\");\n        }\n    }\n}\n\nexport function detectBody() {\n    if (jQuery(document).width() < 769) {\n        jQuery('body').addClass('body-small')\n    } else {\n        jQuery('body').removeClass('body-small')\n    }\n}\n\nexport function smoothlyMenu() {\n    if (!jQuery('body').hasClass('mini-navbar') || jQuery('body').hasClass('body-small')) {\n        // Hide menu in order to smoothly turn on when maximize menu\n        jQuery('#side-menu').hide();\n        // For smoothly turn on menu\n        setTimeout(\n            function () {\n                jQuery('#side-menu').fadeIn(400);\n            }, 200);\n    } else if (jQuery('body').hasClass('fixed-sidebar')) {\n        jQuery('#side-menu').hide();\n        setTimeout(\n            function () {\n                jQuery('#side-menu').fadeIn(400);\n            }, 100);\n    } else {\n        // Remove all inline style from jquery fadeIn function to reset menu state\n        jQuery('#side-menu').removeAttr('style');\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.helpers.ts","// Angular/3rd party imports\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Input } from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule } from \"@angular/router\";\nimport { LocationStrategy, HashLocationStrategy, CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgxPaginationModule } from 'ngx-pagination';\n\n// Component imports\nimport { AppComponent } from './app.component';\nimport { TopnavbarComponent } from \"./components/topnavbar/topnavbar.component\";\nimport { NavigationComponent } from \"./components/navigation/navigation.component\";\nimport { HomeComponent } from \"./pages/home/home.component\";\nimport { GraphsComponent } from \"./pages/graphs/graphs.component\";\nimport { SurveyComponent } from \"./pages/survey/survey.component\";\nimport { InputComponent } from \"./pages/input/input.component\";\nimport { EditComponent } from \"./pages/edit/edit.component\";\nimport { ExportRawComponent } from './pages/exportRaw/exportRaw.component';\nimport { NotFoundComponent } from './pages/not-found/not-found.component';\n\n// Services/Pipes imports\nimport { SurveyService } from './services/survey.service';\nimport { GraphService } from './services/graph.service';\nimport { AuthenticationService } from './services/authentication.service';\nimport { AuthGuardService } from './services/auth-guard.service';\nimport { KeysPipe } from './pipes/keys.pipe';\nimport { FilterByQuestionIDPipe } from \"./pipes/filterQuestionId.pipe\";\nimport { FilterByOptionActivePipe } from './pipes/filterByOptionActive.pipe';\nimport { FilterByDatePipe } from './pipes/filterByDate.pipe';\nimport { FilterPipe } from './pipes/filter.pipe';\nimport { FilterBySurveyIdPipe } from './pipes/filterSurvey.pipe';\nimport { GraphableQuestionPipe } from './pipes/graphableQuestion.pipe';\nimport { ExceptQuestionIdPipe } from './pipes/exceptQuestionId.pipe';\nimport { FilterByQuestionActivePipe } from './pipes/filterByQuestionActive.pipe'\n\n\n// Custom imports\nimport { appRoutes } from \"./app.routes\";\nimport { Globals } from './globals';\n\n\n@NgModule({\n    // Declarations allow all components and pipes to be used through the project\n   declarations: [\n      AppComponent,\n      NavigationComponent,\n      TopnavbarComponent,\n      HomeComponent,\n      EditComponent,\n      ExportRawComponent,\n      GraphsComponent,\n      InputComponent,\n      SurveyComponent,\n      NotFoundComponent,\n      KeysPipe,\n      FilterByOptionActivePipe,\n      FilterByQuestionIDPipe,\n      FilterByDatePipe,\n      FilterPipe,\n      FilterBySurveyIdPipe,\n      GraphableQuestionPipe,\n      ExceptQuestionIdPipe,\n      FilterByQuestionActivePipe, \n   ],\n   // Imports bring in external modules such as core Angular modules\n   imports: [\n      BrowserModule,\n      FormsModule,\n      HttpModule,\n      HttpClientModule,\n      RouterModule.forRoot(appRoutes),\n      ReactiveFormsModule,\n      NgxPaginationModule,\n      CommonModule\n   ],\n   // Providers allow all components to use the given services\n   providers: [\n       SurveyService, \n       GraphService, \n       AuthenticationService, \n       AuthGuardService, \n       Globals, \n       {provide: LocationStrategy, useClass: HashLocationStrategy}\n    ],\n   // Bootstrap is the first component loaded in the project\n   bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { HomeComponent } from \"./pages/home/home.component\";\nimport { GraphsComponent } from './pages/graphs/graphs.component';\nimport { InputComponent } from './pages/input/input.component';\nimport { SurveyComponent } from './pages/survey/survey.component';\nimport { EditComponent } from './pages/edit/edit.component';\nimport { ExportRawComponent } from './pages/exportRaw/exportRaw.component';\nimport { NotFoundComponent } from './pages/not-found/not-found.component';\nimport { AuthGuardService as AuthGuard } from './services/auth-guard.service';\n\n// path refers to the end of the url after .org such as www.dutchesscap.org/\nexport const appRoutes=[\n    {   // When path is empty, redirect to the home page\n        path:'',\n        redirectTo:'home',\n        pathMatch:'full'\n    },\n    {\n        path: 'home',\n        component: HomeComponent\n    },\n    {\n        path: 'graphs',\n        component: GraphsComponent\n        //canActivate: [AuthGuard]\n    },\n    {\n        path: 'input',\n        component: InputComponent,\n    },\n    {\n        path: 'exportRaw',\n        component: ExportRawComponent,\n    },\n    {\n        path: 'edit',\n        component: EditComponent,\n    },\n    {\n        path: 'survey',\n        component: SurveyComponent,\n    },\n    {   // When path does not match one of the declared paths, redirect to 404 page\n        path: '**',\n        component: NotFoundComponent,\n    }\n];\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.routes.ts","import { Component, OnInit, Input } from '@angular/core';\nimport { Router } from \"@angular/router\";\n\n@Component({\n    selector: 'navigation',\n    templateUrl: './navigation.component.html',\n    styleUrls: ['./navigation.component.css']\n})\nexport class NavigationComponent implements OnInit {\n    constructor(private router: Router) { }\n\n    ngOnInit() { }\n    activeRoute(routename: string): boolean {\n        return this.router.url.indexOf(routename) > -1;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/navigation/navigation.component.ts","import { Component } from '@angular/core';\nimport {smoothlyMenu} from \"../../app.helpers\";\nimport { AuthenticationService } from '../../services/authentication.service';\n\n@Component({\n    selector: 'topnavbar',\n    templateUrl: './topnavbar.component.html',\n    styleUrls: ['./topnavbar.component.css']\n})\n\nexport class TopnavbarComponent {\n    // Declare the AuthenticationService so that it's available to this component\n    constructor(private auth: AuthenticationService) { }\n    \n    toggleNavigation(): void {\n        jQuery(\"body\").toggleClass(\"mini-navbar\");\n        smoothlyMenu();\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/components/topnavbar/topnavbar.component.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n   name: 'ExceptQuestionId'\r\n})\r\n\r\nexport class ExceptQuestionIdPipe implements PipeTransform {\r\n\r\n    transform(questions : any, questionId: number ): any[] {\r\n        if (questions) {\r\n            return questions.filter((question: any) => question.question_id != questionId);\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/exceptQuestionId.pipe.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n   name: 'filter'\r\n})\r\n\r\nexport class FilterPipe implements PipeTransform {\r\n\r\n   transform(items: any[], searchText: string): any[] {\r\n\r\n      if (!items) return [];\r\n\r\n      if (!searchText) return items;\r\n\r\n      searchText = searchText.toLowerCase();\r\n      console.log(searchText);\r\n      return items.filter(it => {\r\n         return it.response.toLowerCase().includes(searchText);\r\n      });\r\n      \r\n   }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/filter.pipe.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n   name: 'filterByDate'\r\n})\r\n\r\nexport class FilterByDatePipe implements PipeTransform {\r\n\r\n    transform(responses : any, date: Date, date1: Date): any[] {\r\n        if (responses) {\r\n            return responses.filter((response: any) => response.date_taken >= date && response.date_taken <= date1);\r\n        }\r\n    }\r\n  \r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/filterByDate.pipe.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n   name: 'ActiveOptions'\r\n})\r\n\r\nexport class FilterByOptionActivePipe implements PipeTransform {\r\n\r\n    transform(options : any): any[] {\r\n        if (options) {\r\n            return options.filter((option: any) => option.option_is_active === true);\r\n        }\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/filterByOptionActive.pipe.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n   name: 'ActiveQuestions'\r\n})\r\n\r\nexport class FilterByQuestionActivePipe implements PipeTransform {\r\n\r\n    transform(questions : any): any[] {\r\n        if (questions) {\r\n            return questions.filter((question: any) => question.question_is_active === true);\r\n        }\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/filterByQuestionActive.pipe.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n   name: 'filterByQuestionID'\r\n})\r\n\r\nexport class FilterByQuestionIDPipe implements PipeTransform {\r\n\r\n    transform(options : any, questionID: string): any[] {\r\n        if (options) {\r\n            return options.filter((option: any) => option.question_id == questionID);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/filterQuestionId.pipe.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n   name: 'filterBySurveyID'\r\n})\r\n\r\nexport class FilterBySurveyIdPipe implements PipeTransform {\r\n\r\n    transform(surveys : any, surveyID: string): any[] {\r\n        if (surveys) {\r\n            return surveys.filter((survey: any) => survey.survey_id == surveyID);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/filterSurvey.pipe.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n   name: 'GraphableQuestion'\r\n})\r\n\r\nexport class GraphableQuestionPipe implements PipeTransform {\r\n\r\n    transform(questions : any): any[] {\r\n        if (questions) {\r\n            return questions.filter((question: any) => question.question_type != 'text');\r\n        }\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/graphableQuestion.pipe.ts","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'keys',  pure: false })\r\n\r\nexport class KeysPipe implements PipeTransform {\r\n    \r\n    transform(value: any, args?: any[]): any[] {\r\n      // check if \"routes\" exists\r\n      if(value) {\r\n        // create instance vars to store keys and final output\r\n        let keyArr: any[] = Object.keys(value),\r\n            dataArr = [];\r\n\r\n        // loop through the object,\r\n        // pushing values to the return array\r\n        keyArr.forEach((key: any) => {\r\n            dataArr.push(value[key]);\r\n        });\r\n        // return the resulting array\r\n        return dataArr;\r\n      }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/pipes/keys.pipe.ts","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate } from '@angular/router';\r\nimport { AuthenticationService } from './authentication.service';\r\n\r\n@Injectable()\r\nexport class AuthGuardService implements CanActivate {\r\n\r\n  constructor(public auth: AuthenticationService, public router: Router) {}\r\n\r\n  canActivate(): boolean {\r\n    if (!this.auth.isAuthenticated()) {\r\n      this.router.navigate(['login']);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/auth-guard.service.ts","export const environment = {\n  production: true\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts","import { Injectable } from '@angular/core';\r\nimport { Observable} from 'rxjs/Observable';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpResponse, HttpClient, HttpErrorResponse } from '@angular/common/http'\r\nimport { SurveyInfo } from 'app/models/surveyInfo.model';\r\nimport { Response } from '../models/response.model'\r\n\r\n// Http specifc header that is needed to post data to the database\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n  })\r\n};\r\n\r\n@Injectable()\r\nexport class SurveyService {\r\n\r\n  // Instantiates the HttpClient class\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /* \r\n    Get functions\r\n  */\r\n\r\n  // Function that will call the index.js route to get all active surveys\r\n  getActiveSurveys(): Observable<HttpResponse<any>> {\r\n    return this.http.get<any>('http://localhost:3000/api/activeSurveys', { observe: 'response'});\r\n  }\r\n\r\n  // Function that will call the index.js route to get all surveys\r\n  getAllSurveys(): Observable<HttpResponse<any>> {\r\n    return this.http.get<any>('http://localhost:3000/api/allSurveys', { observe: 'response'});\r\n  }\r\n  \r\n  // Function that will call the index.js route to get all questions given a specific survey_id as a parameter\r\n  getActiveSurveyQuestions(survey_id): Observable<HttpResponse<any>> {\r\n    return this.http.get<any>('http://localhost:3000/api/activeSurveyQuestions/' + survey_id, { observe: 'response'});\r\n  }\r\n\r\n  // Function that will call the index.js route to get all questions given a specific survey_id as a parameter\r\n  getAllSurveyQuestions(survey_id): Observable<HttpResponse<any>> {\r\n    return this.http.get<any>('http://localhost:3000/api/allSurveyQuestions/' + survey_id, { observe: 'response'});\r\n  }\r\n  \r\n  // Function that will call the index.js route to get all options given a specific survey_id as a parameter\r\n  getActiveSurveyOptions(survey_id): Observable<HttpResponse<any>> {\r\n    return this.http.get<any>('http://localhost:3000/api/activeSurveyOptions/' + survey_id, { observe: 'response'});\r\n  }\r\n\r\n  // Function that will call the index.js route to get all options given a specific survey_id as a parameter\r\n  getAllSurveyOptions(survey_id): Observable<HttpResponse<any>> {\r\n    return this.http.get<any>('http://localhost:3000/api/allSurveyOptions/' + survey_id, { observe: 'response'});\r\n  }\r\n\r\n  // Function that will call the index.js route to get all responses given a specific survey_id as a parameter\r\n  getSurveyResponses(survey_id): Observable<HttpResponse<any>> {\r\n    return this.http.get<any>('http://localhost:3000/api/surveyResponses/' + survey_id, { observe: 'response'});\r\n  }\r\n\r\n  /* \r\n    Post functions\r\n  */\r\n  \r\n  // Function that will call the index.js to post an individual survey response to a survey given a specific survey_id as a parameter\r\n  postSurveyResponse(response): Observable<Response> {\r\n    return this.http.post<Response>('http://localhost:3000/api/postSurveyResponse', response, httpOptions);\r\n  }\r\n\r\n  postNewSurvey(survey): Observable<any> {\r\n    return this.http.post<any>('http://localhost:3000/api/postNewSurvey', survey, httpOptions);\r\n  }\r\n\r\n  postQuestion(question): Observable<any> {\r\n    return this.http.post<any>('http://localhost:3000/api/postQuestion', question, httpOptions);\r\n  }\r\n\r\n  postOption(option): Observable<any> {\r\n    return this.http.post<any>('http://localhost:3000/api/postOption', option, httpOptions);\r\n  }\r\n\r\n  postArchitecture(surveyComponent): Observable<any> {\r\n    return this.http.post<any>('http://localhost:3000/api/postArchitecture', surveyComponent, httpOptions);\r\n  }\r\n\r\n  /* \r\n    Put/Update functions\r\n  */\r\n\r\n  // Function that will call the index.js route to update a questions given the specific updates\r\n  updateSurveyActive(survey): Observable<any> {\r\n    return this.http.put<any>('http://localhost:3000/api/updateSurveyActive', survey, httpOptions);\r\n  }\r\n\r\n  // Function that will call the index.js route to update a questions given the specific updates\r\n  updateSurveyQuestionActive(question): Observable<any> {\r\n    return this.http.put<any>('http://localhost:3000/api/updateSurveyQuestionActive', question, httpOptions);\r\n  }\r\n\r\n  updateSurveyOptionActive(option): Observable<any> {\r\n    return this.http.put<any>('http://localhost:3000/api/updateSurveyOptionActive', option, httpOptions);\r\n  }\r\n\r\n  wait(ms): void {\r\n    var start = new Date().getTime();\r\n    var end = start;\r\n    while (end < start + ms) {\r\n      end = new Date().getTime();\r\n    }\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse) {\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong,\r\n      console.error(\r\n        `Backend returned code ${error.status}, ` +\r\n        `body was: ${error.error}`);\r\n    }\r\n    // return an observable with a user-facing error message\r\n    //return throwError(\r\n      //'Something bad happened; please try again later.');\r\n  };\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/survey.service.ts","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"#footer {\\n   background-color:white; \\n   text-align: center; \\n   padding: 5px;\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.css\n// module id = 585\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/navigation/navigation.component.css\n// module id = 586\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/topnavbar/topnavbar.component.css\n// module id = 587\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"#btnQuestionAdd {\\r\\n    color: green;\\r\\n }\\r\\n \\r\\n a:hover { \\r\\n    background-color: yellow;\\r\\n }\\r\\n \\r\\n .btnBar{\\r\\n    padding-left: 15px;\\r\\n    padding-right: 15px;\\r\\n    padding-top: 15px;\\r\\n }\\r\\n \\r\\n #surveySelect{\\r\\n    width: 300px;\\r\\n }\\r\\n \\r\\n #ctr {\\r\\n    margin-left: 13%;\\r\\n }\\r\\n\\r\\n  /* The Modal (background) */\\r\\n.modal {\\r\\n    display: none; /* Hidden by default */\\r\\n    position: fixed; /* Stay in place */\\r\\n    z-index: 1; /* Sit on top */\\r\\n    left: 0;\\r\\n    top: 0;\\r\\n    width: 100%; /* Full width */\\r\\n    height: 100%; /* Full height */\\r\\n    overflow: auto; /* Enable scroll if needed */\\r\\n    background-color: rgb(0,0,0); /* Fallback color */\\r\\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\\r\\n}\\r\\n\\r\\n/* Modal Content/Box */\\r\\n.modal-content {\\r\\n    background-color: #fefefe;\\r\\n    margin: 15% auto; /* 15% from the top and centered */\\r\\n    padding: 20px;\\r\\n    border: 1px solid #888;\\r\\n    width: 80%; /* Could be more or less, depending on screen size */\\r\\n}\\r\\n\\r\\n/* The Close Button */\\r\\n.close {\\r\\n    color: #aaa;\\r\\n    float: right;\\r\\n    font-size: 28px;\\r\\n    font-weight: bold;\\r\\n}\\r\\n\\r\\n.close:hover,\\r\\n.close:focus {\\r\\n    color: black;\\r\\n    text-decoration: none;\\r\\n    cursor: pointer;\\r\\n} \\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/edit/edit.component.css\n// module id = 588\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".colQuestions{\\r\\n   width: 35%\\r\\n}\\r\\n\\r\\n.colResponses{\\r\\n   width: 53%\\r\\n}\\r\\n\\r\\n.colDates{\\r\\n   width: 12%;\\r\\n   text-align: right;\\r\\n}\\r\\n\\r\\n.btnExport{\\r\\n   margin-top: 23px;\\r\\n}\\r\\n\\r\\n.divSearchRow {\\r\\n   margin-bottom: 15px;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/exportRaw/exportRaw.component.css\n// module id = 589\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".filterBlock {\\r\\n   margin-top: 30px;\\r\\n}\\r\\n\\r\\n.divExportBtn {\\r\\n   margin-top: 60px;\\r\\n}\\r\\n\\r\\n.optionsDiv {\\r\\n   margin-top: 10px;\\r\\n}\\r\\n\\r\\n.optionsLabel {\\r\\n   padding-left: 10px;\\r\\n   margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.spanOption{\\r\\n   margin-left: 15px;\\r\\n   font-weight: 400;\\r\\n}\\r\\n\\r\\n.optionsList {\\r\\n   margin-top: 10px;\\r\\n   list-style: none;\\r\\n}\\r\\n\\r\\n.btnBlock {\\r\\n   margin-top: 30px;\\r\\n}\\r\\n\\r\\n#multipleDataSets{\\r\\n   margin-bottom: 20px;\\r\\n}\\r\\n\\r\\n.btnGroupSwitch {\\r\\n   padding-left:32px; \\r\\n   padding-right:32px;\\r\\n}\\r\\n\\r\\n\\r\\nli {\\r\\n   margin-bottom: 5px;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/graphs/graphs.component.css\n// module id = 590\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".margin-top-5 {\\r\\n   margin-top: 5px;\\r\\n}\\r\\n\\r\\n.margin-top-20 {\\r\\n   margin-top: 20px;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/home/home.component.css\n// module id = 591\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".spanOption{\\r\\n   margin-left: 15px;\\r\\n   font-weight: 400;\\r\\n}\\r\\n\\r\\n.spanQuestionText{\\r\\n   margin-left:5px\\r\\n}\\r\\n\\r\\n.spanQuestion{\\r\\n   font-weight: 600;\\r\\n   font-size: 14px;\\r\\n}\\r\\n\\r\\n.btnBar{\\r\\n   padding-left: 15px;\\r\\n   padding-right: 15px;\\r\\n   padding-top: 15px;\\r\\n}\\r\\n\\r\\n#surveySelect{\\r\\n   width: 300px;\\r\\n}\\r\\n\\r\\n#ctr {\\r\\n   margin-left: 7%;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/input/input.component.css\n// module id = 592\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"* {\\r\\n    box-sizing: border-box;\\r\\n  }\\r\\n  \\r\\n  body {\\r\\n    padding: 0;\\r\\n    margin: 0;\\r\\n  }\\r\\n  \\r\\n  #notfound {\\r\\n    position: relative;\\r\\n    height: 100vh;\\r\\n    background-color: #fafbfd;\\r\\n  }\\r\\n  \\r\\n  #notfound .notfound {\\r\\n    position: absolute;\\r\\n    left: 50%;\\r\\n    top: 50%;\\r\\n    transform: translate(-50%, -50%);\\r\\n  }\\r\\n  \\r\\n  .notfound {\\r\\n    max-width: 520px;\\r\\n    width: 100%;\\r\\n    text-align: center;\\r\\n  }\\r\\n  \\r\\n  .notfound .notfound-bg {\\r\\n    position: absolute;\\r\\n    left: 0px;\\r\\n    right: 0px;\\r\\n    top: 50%;\\r\\n    transform: translateY(-50%);\\r\\n    z-index: -1;\\r\\n  }\\r\\n  \\r\\n  .notfound .notfound-bg > div {\\r\\n    width: 100%;\\r\\n    background: #fff;\\r\\n    border-radius: 90px;\\r\\n    height: 125px;\\r\\n  }\\r\\n  \\r\\n  .notfound .notfound-bg > div:nth-child(1) {\\r\\n    box-shadow: 5px 5px 0px 0px #f3f3f3;\\r\\n  }\\r\\n  \\r\\n  .notfound .notfound-bg > div:nth-child(2) {\\r\\n    transform: scale(1.3);\\r\\n    box-shadow: 5px 5px 0px 0px #f3f3f3;\\r\\n    position: relative;\\r\\n    z-index: 10;\\r\\n  }\\r\\n  \\r\\n  .notfound .notfound-bg > div:nth-child(3) {\\r\\n    box-shadow: 5px 5px 0px 0px #f3f3f3;\\r\\n    position: relative;\\r\\n    z-index: 90;\\r\\n  }\\r\\n  \\r\\n  .notfound h1 {\\r\\n    font-family: 'Quicksand', sans-serif;\\r\\n    font-size: 86px;\\r\\n    text-transform: uppercase;\\r\\n    font-weight: 700;\\r\\n    margin-top: 0;\\r\\n    margin-bottom: 8px;\\r\\n    color: #151515;\\r\\n  }\\r\\n  \\r\\n  .notfound h2 {\\r\\n    font-family: 'Quicksand', sans-serif;\\r\\n    font-size: 26px;\\r\\n    margin: 0;\\r\\n    font-weight: 700;\\r\\n    color: #151515;\\r\\n  }\\r\\n  \\r\\n  .notfound a {\\r\\n    font-family: 'Quicksand', sans-serif;\\r\\n    font-size: 14px;\\r\\n    text-decoration: none;\\r\\n    text-transform: uppercase;\\r\\n    background: #18e06f;\\r\\n    display: inline-block;\\r\\n    padding: 15px 30px;\\r\\n    border-radius: 5px;\\r\\n    color: #fff;\\r\\n    font-weight: 700;\\r\\n    margin-top: 20px;\\r\\n  }\\r\\n  \\r\\n  @media only screen and (max-width: 767px) {\\r\\n      .notfound .notfound-bg {\\r\\n        width: 287px;\\r\\n        margin: auto;\\r\\n      }\\r\\n  \\r\\n      .notfound .notfound-bg > div {\\r\\n        height: 85px;\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  @media only screen and (max-width: 480px) {\\r\\n    .notfound h1 {\\r\\n      font-size: 68px;\\r\\n    }\\r\\n  \\r\\n    .notfound h2 {\\r\\n      font-size: 18px;\\r\\n    }\\r\\n  }\\r\\n  \", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/not-found/not-found.component.css\n// module id = 593\n// module chunks = 1","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \".header {\\r\\n    color: #36A0FF;\\r\\n    font-size: 27px;\\r\\n    padding: 10px;\\r\\n}\\r\\n\\r\\n.header2 {\\r\\n    font-size: 20px;\\r\\n}\\r\\n\\r\\n.header3 {\\r\\n    color: #36A0FF;\\r\\n    font-size: 15px;\\r\\n    padding: 10px;\\r\\n    margin-bottom:30px;\\r\\n}\\r\\n\\r\\n.pages{\\r\\n    margin-left:290px;\\r\\n}\\r\\n\\r\\n.pageNumbers {\\r\\n    list-style-type: none;\\r\\n    display:inline;\\r\\n}\\r\\n\\r\\n.custom-pagination{\\r\\n    display:inline-block;\\r\\n}\\r\\n\\r\\n.pagination{\\r\\n    display: inline;\\r\\n}\\r\\n\\r\\n.pageNumberActive {\\r\\n    color: black;\\r\\n    list-style-type: none;\\r\\n    display:inline;\\r\\n}\\r\\n\\r\\n.inline {\\r\\n    display:inline-block;\\r\\n    margin-right:5px;\\r\\n}\\r\\n\\r\\n.container-fluid{\\r\\n    width:100%;    \\r\\n}\\r\\n\\r\\n.container {\\r\\n    height: 100%;\\r\\n    margin: 0 auto;\\r\\n}\\r\\n\\r\\n#container2 {\\r\\n    height: 90%;\\r\\n}\\r\\n\\r\\n#bucket{ \\r\\n    margin-left: auto;\\r\\n    margin-right: auto;\\r\\n    text-align: center;\\r\\n    float: none;\\r\\n    padding-top: 1%;\\r\\n}\\r\\n\\r\\n.bigicon {\\r\\n    font-size: 35px;\\r\\n    color: #36A0FF;\\r\\n}\\r\\n\\r\\n#btn {\\r\\n    margin-top: 1%;\\r\\n}\\r\\n\\r\\n.form-group {\\r\\n    margin: -10px;\\r\\n}\\r\\n\\r\\n#divCheckboxOptionText {\\r\\n    transform: translateX(39%);\\r\\n    text-align: left;\\r\\n}\\r\\n\\r\\n#radioBoxOptionText {\\r\\n    transform: translateX(39%);\\r\\n    text-align: left;\\r\\n}\\r\\n\\r\\n#radioStyle {\\r\\n    transform: translateX(50%);\\r\\n}\\r\\n\\r\\n#dropdownStyle {\\r\\n    float: none;\\r\\n    margin: auto 0;\\r\\n    width:250px;\\r\\n    transform: translateX(25%);\\r\\n}\\r\\n\\r\\n#multiplechoiceStyle{\\r\\n    transform: translateX(50%);\\r\\n}\\r\\n\\r\\n.btn {\\r\\n    width: 80px;\\r\\n}\\r\\n\\r\\n#loginBtn {\\r\\n    position: absolute;\\r\\n    top: 0;\\r\\n    right: 0;\\r\\n    margin-top: 5px;\\r\\n    margin-right: 5px;\\r\\n}\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/survey/survey.component.css\n// module id = 594\n// module chunks = 1","var map = {\n\t\"./af\": 214,\n\t\"./af.js\": 214,\n\t\"./ar\": 221,\n\t\"./ar-dz\": 215,\n\t\"./ar-dz.js\": 215,\n\t\"./ar-kw\": 216,\n\t\"./ar-kw.js\": 216,\n\t\"./ar-ly\": 217,\n\t\"./ar-ly.js\": 217,\n\t\"./ar-ma\": 218,\n\t\"./ar-ma.js\": 218,\n\t\"./ar-sa\": 219,\n\t\"./ar-sa.js\": 219,\n\t\"./ar-tn\": 220,\n\t\"./ar-tn.js\": 220,\n\t\"./ar.js\": 221,\n\t\"./az\": 222,\n\t\"./az.js\": 222,\n\t\"./be\": 223,\n\t\"./be.js\": 223,\n\t\"./bg\": 224,\n\t\"./bg.js\": 224,\n\t\"./bm\": 225,\n\t\"./bm.js\": 225,\n\t\"./bn\": 226,\n\t\"./bn.js\": 226,\n\t\"./bo\": 227,\n\t\"./bo.js\": 227,\n\t\"./br\": 228,\n\t\"./br.js\": 228,\n\t\"./bs\": 229,\n\t\"./bs.js\": 229,\n\t\"./ca\": 230,\n\t\"./ca.js\": 230,\n\t\"./cs\": 231,\n\t\"./cs.js\": 231,\n\t\"./cv\": 232,\n\t\"./cv.js\": 232,\n\t\"./cy\": 233,\n\t\"./cy.js\": 233,\n\t\"./da\": 234,\n\t\"./da.js\": 234,\n\t\"./de\": 237,\n\t\"./de-at\": 235,\n\t\"./de-at.js\": 235,\n\t\"./de-ch\": 236,\n\t\"./de-ch.js\": 236,\n\t\"./de.js\": 237,\n\t\"./dv\": 238,\n\t\"./dv.js\": 238,\n\t\"./el\": 239,\n\t\"./el.js\": 239,\n\t\"./en-au\": 240,\n\t\"./en-au.js\": 240,\n\t\"./en-ca\": 241,\n\t\"./en-ca.js\": 241,\n\t\"./en-gb\": 242,\n\t\"./en-gb.js\": 242,\n\t\"./en-ie\": 243,\n\t\"./en-ie.js\": 243,\n\t\"./en-il\": 244,\n\t\"./en-il.js\": 244,\n\t\"./en-nz\": 245,\n\t\"./en-nz.js\": 245,\n\t\"./eo\": 246,\n\t\"./eo.js\": 246,\n\t\"./es\": 249,\n\t\"./es-do\": 247,\n\t\"./es-do.js\": 247,\n\t\"./es-us\": 248,\n\t\"./es-us.js\": 248,\n\t\"./es.js\": 249,\n\t\"./et\": 250,\n\t\"./et.js\": 250,\n\t\"./eu\": 251,\n\t\"./eu.js\": 251,\n\t\"./fa\": 252,\n\t\"./fa.js\": 252,\n\t\"./fi\": 253,\n\t\"./fi.js\": 253,\n\t\"./fo\": 254,\n\t\"./fo.js\": 254,\n\t\"./fr\": 257,\n\t\"./fr-ca\": 255,\n\t\"./fr-ca.js\": 255,\n\t\"./fr-ch\": 256,\n\t\"./fr-ch.js\": 256,\n\t\"./fr.js\": 257,\n\t\"./fy\": 258,\n\t\"./fy.js\": 258,\n\t\"./gd\": 259,\n\t\"./gd.js\": 259,\n\t\"./gl\": 260,\n\t\"./gl.js\": 260,\n\t\"./gom-latn\": 261,\n\t\"./gom-latn.js\": 261,\n\t\"./gu\": 262,\n\t\"./gu.js\": 262,\n\t\"./he\": 263,\n\t\"./he.js\": 263,\n\t\"./hi\": 264,\n\t\"./hi.js\": 264,\n\t\"./hr\": 265,\n\t\"./hr.js\": 265,\n\t\"./hu\": 266,\n\t\"./hu.js\": 266,\n\t\"./hy-am\": 267,\n\t\"./hy-am.js\": 267,\n\t\"./id\": 268,\n\t\"./id.js\": 268,\n\t\"./is\": 269,\n\t\"./is.js\": 269,\n\t\"./it\": 270,\n\t\"./it.js\": 270,\n\t\"./ja\": 271,\n\t\"./ja.js\": 271,\n\t\"./jv\": 272,\n\t\"./jv.js\": 272,\n\t\"./ka\": 273,\n\t\"./ka.js\": 273,\n\t\"./kk\": 274,\n\t\"./kk.js\": 274,\n\t\"./km\": 275,\n\t\"./km.js\": 275,\n\t\"./kn\": 276,\n\t\"./kn.js\": 276,\n\t\"./ko\": 277,\n\t\"./ko.js\": 277,\n\t\"./ky\": 278,\n\t\"./ky.js\": 278,\n\t\"./lb\": 279,\n\t\"./lb.js\": 279,\n\t\"./lo\": 280,\n\t\"./lo.js\": 280,\n\t\"./lt\": 281,\n\t\"./lt.js\": 281,\n\t\"./lv\": 282,\n\t\"./lv.js\": 282,\n\t\"./me\": 283,\n\t\"./me.js\": 283,\n\t\"./mi\": 284,\n\t\"./mi.js\": 284,\n\t\"./mk\": 285,\n\t\"./mk.js\": 285,\n\t\"./ml\": 286,\n\t\"./ml.js\": 286,\n\t\"./mn\": 287,\n\t\"./mn.js\": 287,\n\t\"./mr\": 288,\n\t\"./mr.js\": 288,\n\t\"./ms\": 290,\n\t\"./ms-my\": 289,\n\t\"./ms-my.js\": 289,\n\t\"./ms.js\": 290,\n\t\"./mt\": 291,\n\t\"./mt.js\": 291,\n\t\"./my\": 292,\n\t\"./my.js\": 292,\n\t\"./nb\": 293,\n\t\"./nb.js\": 293,\n\t\"./ne\": 294,\n\t\"./ne.js\": 294,\n\t\"./nl\": 296,\n\t\"./nl-be\": 295,\n\t\"./nl-be.js\": 295,\n\t\"./nl.js\": 296,\n\t\"./nn\": 297,\n\t\"./nn.js\": 297,\n\t\"./pa-in\": 298,\n\t\"./pa-in.js\": 298,\n\t\"./pl\": 299,\n\t\"./pl.js\": 299,\n\t\"./pt\": 301,\n\t\"./pt-br\": 300,\n\t\"./pt-br.js\": 300,\n\t\"./pt.js\": 301,\n\t\"./ro\": 302,\n\t\"./ro.js\": 302,\n\t\"./ru\": 303,\n\t\"./ru.js\": 303,\n\t\"./sd\": 304,\n\t\"./sd.js\": 304,\n\t\"./se\": 305,\n\t\"./se.js\": 305,\n\t\"./si\": 306,\n\t\"./si.js\": 306,\n\t\"./sk\": 307,\n\t\"./sk.js\": 307,\n\t\"./sl\": 308,\n\t\"./sl.js\": 308,\n\t\"./sq\": 309,\n\t\"./sq.js\": 309,\n\t\"./sr\": 311,\n\t\"./sr-cyrl\": 310,\n\t\"./sr-cyrl.js\": 310,\n\t\"./sr.js\": 311,\n\t\"./ss\": 312,\n\t\"./ss.js\": 312,\n\t\"./sv\": 313,\n\t\"./sv.js\": 313,\n\t\"./sw\": 314,\n\t\"./sw.js\": 314,\n\t\"./ta\": 315,\n\t\"./ta.js\": 315,\n\t\"./te\": 316,\n\t\"./te.js\": 316,\n\t\"./tet\": 317,\n\t\"./tet.js\": 317,\n\t\"./tg\": 318,\n\t\"./tg.js\": 318,\n\t\"./th\": 319,\n\t\"./th.js\": 319,\n\t\"./tl-ph\": 320,\n\t\"./tl-ph.js\": 320,\n\t\"./tlh\": 321,\n\t\"./tlh.js\": 321,\n\t\"./tr\": 322,\n\t\"./tr.js\": 322,\n\t\"./tzl\": 323,\n\t\"./tzl.js\": 323,\n\t\"./tzm\": 325,\n\t\"./tzm-latn\": 324,\n\t\"./tzm-latn.js\": 324,\n\t\"./tzm.js\": 325,\n\t\"./ug-cn\": 326,\n\t\"./ug-cn.js\": 326,\n\t\"./uk\": 327,\n\t\"./uk.js\": 327,\n\t\"./ur\": 328,\n\t\"./ur.js\": 328,\n\t\"./uz\": 330,\n\t\"./uz-latn\": 329,\n\t\"./uz-latn.js\": 329,\n\t\"./uz.js\": 330,\n\t\"./vi\": 331,\n\t\"./vi.js\": 331,\n\t\"./x-pseudo\": 332,\n\t\"./x-pseudo.js\": 332,\n\t\"./yo\": 333,\n\t\"./yo.js\": 333,\n\t\"./zh-cn\": 334,\n\t\"./zh-cn.js\": 334,\n\t\"./zh-hk\": 335,\n\t\"./zh-hk.js\": 335,\n\t\"./zh-tw\": 336,\n\t\"./zh-tw.js\": 336\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) // check for number\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\treturn id;\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 616;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/moment/locale ^\\.\\/.*$\n// module id = 616\n// module chunks = 1","module.exports = \"<router-outlet></router-outlet>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/app.component.html\n// module id = 628\n// module chunks = 1","module.exports = \"<nav class=\\\"navbar-default navbar-static-side\\\" role=\\\"navigation\\\">\\n    <div class=\\\"sidebar-collapse\\\">\\n        <ul class=\\\"nav metismenu\\\" id=\\\"side-menu\\\">\\n            <li class=\\\"nav-header\\\">\\n                <div class=\\\"dropdown profile-element\\\">\\n                    <span>\\n                        <img alt=\\\"image\\\" class=\\\"img-rectangle\\\" width=\\\"165px\\\"\\n                             src=\\\"./assets/img/dutchess-cap.png\\\" />\\n                    </span>\\n                </div>\\n            </li>\\n            <li [ngClass]=\\\"{active: activeRoute('home')}\\\">\\n                <a [routerLink]=\\\"['/home']\\\"><i class=\\\"fas fa-home\\\"></i> <span class=\\\"nav-label\\\">Home</span></a>\\n            </li>\\n            <li [ngClass]=\\\"{active: activeRoute('graphs')}\\\">\\n               <a [routerLink]=\\\"['/graphs']\\\"><i class=\\\"fas fa-chart-line\\\"></i> <span class=\\\"nav-label\\\">Graph Designer</span></a>\\n           </li>\\n            <li [ngClass]=\\\"{active: activeRoute('input')}\\\">\\n                <a [routerLink]=\\\"['/input']\\\"><i class=\\\"fas fa-user-edit\\\"></i> <span class=\\\"nav-label\\\">Input Survey Manually</span></a>\\n            </li>\\n            <li [ngClass]=\\\"{active: activeRoute('exportRaw')}\\\">\\n                <a [routerLink]=\\\"['/exportRaw']\\\"><i class=\\\"fas fa-table\\\"></i> <span class=\\\"nav-label\\\">Query/Export Data</span></a>\\n            </li>\\n            <li [ngClass]=\\\"{active: activeRoute('edit')}\\\">\\n                  <a [routerLink]=\\\"['/edit']\\\"><i class=\\\"fas fa-edit\\\"></i> <span class=\\\"nav-label\\\">Edit Survey</span></a>\\n            </li>\\n        </ul>\\n    </div>\\n</nav>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/navigation/navigation.component.html\n// module id = 629\n// module chunks = 1","module.exports = \"<div class=\\\"row border-bottom\\\">\\n    <div id=\\\"topNavBar\\\">\\n        <nav class=\\\"navbar navbar-static-top white-bg\\\" role=\\\"navigation\\\" style=\\\"margin-bottom: 0\\\">\\n            <ul class=\\\"nav navbar-top-links navbar-right\\\">\\n                <li>\\n                    <a *ngIf=\\\"auth.isAuthenticated()\\\"\\n                    (click)=\\\"auth.logout()\\\" style=\\\"font-size:12px\\\">\\n                        <i class=\\\"fas fa-globe-americas\\\"></i> Return To Survey / Logout\\n                    </a>\\n                </li>\\n            </ul>\\n        </nav>\\n    </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/components/topnavbar/topnavbar.component.html\n// module id = 630\n// module chunks = 1","module.exports = \"<div id=\\\"wrapper\\\">\\r\\n  <navigation></navigation>\\r\\n  <div id=\\\"page-wrapper\\\" class=\\\"gray-bg\\\">\\r\\n    <topnavbar></topnavbar>\\r\\n    <div id=\\\"ctr\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-10 ibox float-e-margins\\\">\\r\\n          <div class=\\\"ibox-content\\\">\\r\\n            <div class=\\\"row justify-content-between btnBar\\\">\\r\\n               <div class=\\\"col\\\">\\r\\n                  <select class=\\\"form-control pull-left\\\" id=\\\"surveySelect\\\" (change)=\\\"updateSurveyFormData($event.target.value)\\\">\\r\\n                    <option value=\\\"-1\\\" disabled selected>Select survey to edit or create a new one!</option>\\r\\n                    <option *ngFor=\\\"let s of surveys\\\" [value]=\\\"s.survey_id\\\">\\r\\n                      {{ s.survey_name }}\\r\\n                    </option>\\r\\n                  </select>\\r\\n                </div>\\r\\n                <div class=\\\"col\\\">\\r\\n                  <button type=\\\"button\\\" (click)=\\\"newSurveyForm()\\\" class=\\\"pull-right btn btn-warning btn-sm\\\">Create New Survey</button>\\r\\n                </div>\\r\\n            </div>\\r\\n            <hr>\\r\\n            <div class=\\\"feed-activity-list\\\">\\r\\n              <form [formGroup]=\\\"survey\\\" novalidate (ngSubmit)=\\\"save(survey.value)\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                  <h2 style=\\\"font-weight:bold\\\">Survey Name</h2>\\r\\n                  <input [readonly]=\\\"setReadOnly()\\\" type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"survey_name\\\"\\r\\n                    placeholder=\\\"Enter Survey Name\\\">\\r\\n                </div>\\r\\n                <!-- QUESTIONS -->\\r\\n                <div formArrayName=\\\"questions\\\">\\r\\n                  <div *ngFor=\\\"let question of survey.controls.questions.controls; let i=index\\\">\\r\\n                    <div [formGroupName]=\\\"i\\\" class=\\\"feed-element\\\" style=\\\"margin-bottom:10px\\\">\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-lg-9\\\">\\r\\n                          <h3 class=\\\"pull-left\\\">Question {{ i+1}}</h3>\\r\\n                        \\r\\n                          <button type=\\\"button\\\" *ngIf=\\\"survey.controls.questions.length > 1 && i > currentQuestionScope\\\" class=\\\"btn btn-danger btn-sm pull-right\\\" (click)='removeQuestion(i)'>\\r\\n                            <i id=\\\"btnQuestionRemove\\\" class=\\\"fas fa-minus-circle\\\"></i>\\r\\n                            Remove Question\\r\\n                          </button>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                        \\r\\n                      <div class=\\\"row\\\">\\r\\n                          <div class=\\\"col-lg-12\\\">\\r\\n                            <small class=\\\"text-muted\\\">Question Active / Inactive</small>\\r\\n                          </div>\\r\\n                      </div>\\r\\n                      <select formControlName=\\\"question_is_active\\\" class=\\\"form-control form-control-sm\\\" required>\\r\\n                        <option value=\\\"\\\" disabled selected>Select Active/Inactive</option>\\r\\n                        <option value=\\\"true\\\">Active</option>\\r\\n                        <option value=\\\"false\\\">Inactive</option>\\r\\n                      </select>\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-lg-3\\\">\\r\\n                          <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col-lg-12\\\">\\r\\n                              <small class=\\\"text-muted\\\">Question Type</small>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                          <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col-lg-12\\\">\\r\\n                              <!--TYPE GO HERE-->\\r\\n                              <select formControlName=\\\"question_type\\\" class=\\\"form-control form-control-sm\\\" required>\\r\\n                                <option value=\\\"\\\" disabled selected>Select question type:</option>\\r\\n                                <option value=\\\"select\\\">Dropdown</option>\\r\\n                                <option value=\\\"checkbox\\\">Checkboxes</option>\\r\\n                                <option value=\\\"radio\\\">Multiple Choice</option>\\r\\n                                <option value=\\\"text\\\">Textbox</option>\\r\\n                              </select>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                        \\r\\n                      </div>\\r\\n                      <div class=\\\"row\\\" style=\\\"margin-top:10px\\\">\\r\\n                        <div class=\\\"col-lg-12\\\">\\r\\n                          <small class=\\\"text-muted\\\">Question Prompt</small>\\r\\n                          <!--TEXT BOX GOES HERE-->\\r\\n                          <div class=\\\"form-group\\\">\\r\\n                            <textarea [readonly]=\\\"setReadOnly()\\\" formControlName=\\\"question_text\\\" class=\\\"form-control\\\" id=\\\"exampleTextarea\\\" rows=\\\"2\\\"\\r\\n                              placeholder=\\\"Enter Question Prompt Here...\\\"></textarea>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      \\r\\n                      <div class=\\\"row\\\" *ngIf=\\\"showOptionsDiv(question)\\\">\\r\\n                        <div class=\\\"col-lg-5\\\">\\r\\n                          <!--OPTIONS GO HERE-->\\r\\n                            <!-- SHOWING OPTIONS-->\\r\\n                            \\r\\n                            <div formArrayName=\\\"options\\\" *ngFor=\\\"let option of survey.controls.questions.controls[i].controls.options.controls; let j=index\\\">\\r\\n                              <div class=\\\"row\\\">\\r\\n\\r\\n                                    <h3 class=\\\"pull-left\\\">Option {{ j+1}}</h3>\\r\\n                                    <button type=\\\"button\\\" class=\\\"btn btn-danger btn-sm pull-right\\\" *ngIf=\\\"question.controls.options.length > 1  &&  j > currentOptionScope[i] \\\" \\r\\n                                        (click)=\\\"removeOption(question, j, i)\\\"><i class=\\\"fas fa-minus-circle\\\"></i>\\r\\n                                        Remove Option\\r\\n                                      </button>\\r\\n                              </div>\\r\\n                              \\r\\n                              <div class=\\\"row\\\">\\r\\n                                <div class=\\\"col-lg-10\\\">\\r\\n                                  <div [formGroupName]=\\\"j\\\">\\r\\n                                      <div class=\\\"row\\\">\\r\\n                                          <div class=\\\"col-lg-12\\\">\\r\\n                                            <small class=\\\"text-muted\\\">Option Active / Inactive</small>\\r\\n                                          </div>\\r\\n                                      </div>\\r\\n                                      <select formControlName=\\\"option_is_active\\\" class=\\\"form-control form-control-sm\\\" required>\\r\\n                                        <option value=\\\"\\\" disabled selected>Select Active/Inactive</option>\\r\\n                                        <option value=\\\"true\\\">Active</option>\\r\\n                                        <option value=\\\"false\\\">Inactive</option>\\r\\n                                      </select>\\r\\n                                    <div class=\\\"form-group\\\">\\r\\n                                      <input [readonly]=\\\"setReadOnly()\\\" type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter Option\\\"\\r\\n                                        formControlName=\\\"option_text\\\">\\r\\n                                    </div>\\r\\n                                  </div>\\r\\n                                </div>\\r\\n                              </div>\\r\\n                              \\r\\n                              <button type=\\\"button\\\" class=\\\"btn btn-success btn-sm pull-right\\\" *ngIf=\\\"j == question.controls.options.length - 1 && j >= currentOptionScope[i]\\\"\\r\\n                                (click)=\\\"addOption(question,i)\\\"><i class=\\\"fa fa-plus-circle\\\"></i>\\r\\n                                Add Option\\r\\n                              </button>\\r\\n                                <p>j : {{ j }}</p>\\r\\n                                <p>current question scope: {{currentQuestionScope}}</p>\\r\\n                                <p>current option scope: {{currentOptionScope[i]}}</p>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                      <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-lg-12\\\">\\r\\n                          <button type=\\\"button\\\" class='pull-right btn btn-sm' *ngIf='i >= currentQuestionScope' (click)='addQuestion(i)' style='background-color:transparent;'>\\r\\n                              <i id=\\\"btnQuestionAdd\\\" class=\\\"fa fa-plus-circle\\\"></i>\\r\\n                              Add Question\\r\\n                          </button>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <!--END OF FEED ELEMENT DIV-  -->\\r\\n                  </div>\\r\\n                  <!--END OF nfFor DIV-->\\r\\n                </div>\\r\\n                <!--END OF Form Array for Questions Div-->\\r\\n                <button type=\\\"submit\\\" id=\\\"save\\\" (click)=\\\"openModal()\\\" class=\\\"btn btn-primary btn-lg btn-block\\\">Save Survey</button>\\r\\n\\r\\n              </form>\\r\\n              <div id=\\\"success\\\" class=\\\"modal\\\">\\r\\n\\r\\n                <!-- Modal content -->\\r\\n                <div class=\\\"modal-content\\\">\\r\\n                  <span (click)=\\\"closeModal()\\\" class=\\\"close\\\">&times;</span>\\r\\n                  <p>Saved Successfully!</p>\\r\\n                </div>\\r\\n              \\r\\n              </div>\\r\\n            </div>\\r\\n            \\r\\n            <pre>Form Value: <br>{{survey.value | json}}</pre>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/edit/edit.component.html\n// module id = 631\n// module chunks = 1","module.exports = \"<div id=\\\"wrapper\\\">\\r\\n    <navigation></navigation>\\r\\n    <div *ngIf=\\\"showExportDiv\\\" id=\\\"page-wrapper\\\" class=\\\"gray-bg\\\">\\r\\n        <topnavbar></topnavbar>\\r\\n\\r\\n        <div class=\\\"row wrapper border-bottom white-bg page-heading\\\">\\r\\n          <div class=\\\"row\\\" style=\\\"margin-top:30px\\\">\\r\\n\\r\\n            <div class=\\\"col-lg-2\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"exampleFormControlSelect1\\\">Survey</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"exampleFormControlSelect1\\\" (change)=\\\"updateSurvey($event.target.value)\\\">\\r\\n                  <option *ngFor=\\\"let s of surveys\\\" value=\\\"{{s.survey_id}}\\\">\\r\\n                    {{ s.survey_name }}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-lg-4\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"exampleFormControlSelect1\\\">Survey Question</label>\\r\\n                <select class=\\\"form-control\\\" id=\\\"exampleFormControlSelect1\\\" (change)=\\\"updateDataFeed($event.target.value)\\\">\\r\\n                  <option value=\\\"-1\\\">All Questions</option>\\r\\n                  <option *ngFor=\\\"let question of getQuestions()\\\" value=\\\"{{ question.question_id }}\\\">\\r\\n                    {{ question.question_text}}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-lg-2\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"exampleFormControlSelect1\\\">Start Date</label>\\r\\n                <input class=\\\"form-control\\\" type=\\\"date\\\" value=\\\"{{ dateFilterStart }}\\\" (change)=\\\"updateDate($event.target.value)\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-lg-2\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"exampleFormControlSelect1\\\">End Date</label>\\r\\n                <input class=\\\"form-control\\\" type=\\\"date\\\" value=\\\"{{ dateFilterEnd }}\\\" (change)=\\\"updateDateUpper($event.target.value)\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-lg-2\\\">\\r\\n              <button type=\\\"button\\\" class=\\\"btn btn-primary btn-block btn-sm btnExport\\\" (click)=\\\"exportTableToCSV('table.csv')\\\"><i\\r\\n                  class=\\\"fas fa-download\\\"></i> Export Table</button>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"row divSearchRow\\\">\\r\\n\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n              <div class=\\\"input-group\\\">\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"searchText\\\" placeholder=\\\"Filter Responses By Keyword\\\">\\r\\n                <div class=\\\"input-group-btn\\\">\\r\\n                  <button class=\\\"btn btn-default\\\" type=\\\"submit\\\">\\r\\n                    <i class=\\\"glyphicon glyphicon-search\\\"></i>\\r\\n                  </button>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"row \\\">\\r\\n\\r\\n            <div class=\\\"col-lg-12\\\">\\r\\n              <table id=\\\"tableResponses\\\" class=\\\"table table-hover table-sm\\\">\\r\\n                <thead>\\r\\n                  <tr>\\r\\n                    <th class=\\\"colQuestions\\\">Question</th>\\r\\n                    <th class=\\\"colResponses\\\">Response</th>\\r\\n                    <th class=\\\"colDates\\\">Date Submitted</th>\\r\\n                  </tr>\\r\\n                </thead>\\r\\n                <tbody>\\r\\n                  <tr *ngFor=\\\"let response of dataFeed | filter: searchText | filterByDate: dateFilterStart:dateFilterEnd\\\">\\r\\n                    <th> {{ response.question }} </th>\\r\\n                    <td> {{ response.response }}</td>\\r\\n                    <td class=\\\"colDates\\\"> {{ response.date_taken }}</td>\\r\\n                  </tr>\\r\\n                </tbody>\\r\\n              </table>\\r\\n            </div>\\r\\n\\r\\n          </div> \\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/exportRaw/exportRaw.component.html\n// module id = 632\n// module chunks = 1","module.exports = \"<div id=\\\"wrapper\\\">\\r\\n  <navigation></navigation>\\r\\n  <div id=\\\"page-wrapper\\\" class=\\\"gray-bg\\\">\\r\\n    <topnavbar></topnavbar>\\r\\n\\r\\n    <div  class=\\\"row wrapper border-bottom white-bg page-heading\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n\\r\\n        <div *ngIf=\\\"displayDiv\\\" class=\\\"col-lg-3\\\"style=\\\"margin-bottom: 500px\\\">\\r\\n          <br>\\r\\n          <form [formGroup]=\\\"chartForm\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n\\r\\n              <div class=\\\"filterBlock\\\">\\r\\n                <label for=\\\"deepGraphSwitch\\\">Data Set Modeling Switch</label>\\r\\n                <div class=\\\"btn-group w-100\\\" id=\\\"deepGraphSwitch\\\" role=\\\"group\\\" (click)=\\\"updateMultipleDataSetForm($event.target.value)\\\">\\r\\n                  <button [disabled]=\\\"buttonStateSingle()\\\" type=\\\"button\\\" value=\\\"single\\\" class=\\\"btnGroupSwitch btn btn-success\\\">Single</button>\\r\\n                  <button [disabled]=\\\"buttonStateMultiple()\\\" type=\\\"button\\\" value=\\\"multiple\\\" class=\\\"btnGroupSwitch btn btn-success\\\">Double</button>\\r\\n                </div>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"filterBlock\\\">\\r\\n                <label for=\\\"graphType\\\">Chart Type</label>\\r\\n                <select class=\\\"form-control\\\" formControlName=\\\"chartType\\\" (change)=\\\"updateChart()\\\" required>\\r\\n                  <option *ngFor=\\\"let graph of graphService.getGraphTypes()\\\" [value]=\\\"graph.val\\\">\\r\\n                    {{graph.view}}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"filterBlock\\\">\\r\\n                <label for=\\\"graphType\\\">Select Survey</label>\\r\\n                <select class=\\\"form-control\\\" formControlName=\\\"surveyId\\\" required>\\r\\n                  <option *ngFor=\\\"let survey of surveys\\\" [value]=\\\"survey.survey_id\\\">\\r\\n                    {{survey.survey_name}}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n\\r\\n              <div class=\\\"filterBlock\\\">\\r\\n                <label for=\\\"graphType\\\">Select Question</label>\\r\\n                <select class=\\\"form-control\\\" formControlName=\\\"questionId\\\" (change)=\\\"updateChart()\\\" required>\\r\\n                  <option *ngFor=\\\"let question of surveys[chartForm.controls.surveyId.value].questions | GraphableQuestion\\\"\\r\\n                    [value]=\\\"question.question_id\\\">\\r\\n                    {{question.question_text}}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n\\r\\n              <div id=\\\"multipleDataSets\\\" *ngIf=\\\"currentDatasetType != 'single'\\\">\\r\\n                <div class=\\\"filterBlock\\\">\\r\\n                  <label for=\\\"graphType\\\">Select Sub Question</label>\\r\\n                  <select class=\\\"form-control\\\" formControlName=\\\"subQuestionId\\\" required (change)=\\\"updateChart()\\\">\\r\\n                    <option *ngFor=\\\"let question of surveys[chartForm.controls.surveyId.value].questions | ExceptQuestionId: chartForm.controls.questionId.value | GraphableQuestion\\\"\\r\\n                      [value]=\\\"question.question_id\\\">\\r\\n                      {{question.question_text}}\\r\\n                    </option>\\r\\n                  </select>\\r\\n                </div>\\r\\n                <div class=\\\"optionsDiv\\\">\\r\\n                  <form [formGroup]=\\\"optionsForm\\\" (change)=\\\"updateChart()\\\">\\r\\n                    <small class=\\\"optionsLabel text-muted\\\">Sub Question Data Filter</small>\\r\\n                    <ul class=\\\"optionsList\\\" formArrayName=\\\"options\\\" *ngFor=\\\"let option of getSubQuestionOptions(); let i = index\\\">\\r\\n                      <div class=\\\"col-lg-12\\\">\\r\\n                         <li>\\r\\n                           <input type=\\\"checkbox\\\" [formControlName]=\\\"i\\\">\\r\\n                           <span class=\\\"spanOption\\\">{{option.option_text}}</span>\\r\\n                        </li>\\r\\n                      </div>\\r\\n                     </ul>\\r\\n                  </form>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"btnBlock\\\">\\r\\n               <hr>\\r\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary btn-block btn-sm\\\">\\r\\n                  <a href=\\\"graphs\\\" (click)=\\\"download($event)\\\" style=\\\"color:white\\\">\\r\\n                    <i class=\\\"fas fa-download\\\"></i>\\r\\n                    Export Graph\\r\\n                  </a>\\r\\n                </button>\\r\\n              </div>\\r\\n\\r\\n            </div>\\r\\n          </form>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-lg-8\\\">\\r\\n          <canvas id=\\\"graphCanvas\\\" width=\\\"670\\\" height=\\\"670\\\"></canvas>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"col-lg-1\\\">\\r\\n\\r\\n        </div>\\r\\n\\r\\n      </div>\\r\\n\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/graphs/graphs.component.html\n// module id = 633\n// module chunks = 1","module.exports = \"<div id=\\\"wrapper\\\">\\r\\n  <navigation></navigation>\\r\\n  <div id=\\\"page-wrapper\\\" class=\\\"gray-bg\\\">\\r\\n    <topnavbar></topnavbar>\\r\\n    <div  *ngIf=\\\"showHomeDiv\\\" class=\\\"col-lg-3 margin-top-20\\\">\\r\\n      <div class=\\\"ibox float-e-margins\\\">\\r\\n        <div class=\\\"ibox-title\\\">\\r\\n          <h5>Survey Details</h5>\\r\\n        </div>\\r\\n        <div class=\\\"ibox-content\\\">\\r\\n          <div *ngIf=\\\"showInfo\\\" class=\\\"feed-activity-list\\\">\\r\\n            <div *ngFor=\\\"let info of getSurveyInfo()\\\">\\r\\n               <div class=\\\"feed-element margin-top-5\\\" (click)=\\\"updateActiveSurvey($event.target.value)\\\">\\r\\n                <button type=\\\"button\\\" *ngIf=\\\"info.status\\\" value=\\\"{{info.survey_id}}\\\" class=\\\"label label-primary pull-right\\\">Active</button>\\r\\n                <button type=\\\"button\\\" *ngIf=\\\"! info.status\\\" value=\\\"{{info.survey_id}}\\\" class=\\\"label label-warning pull-right\\\">Inactive</button>\\r\\n                <strong>{{info.name}}</strong>\\r\\n                <div class=\\\"margin-top-5\\\">\\r\\n                  <div> Date Created: <small class=\\\"text-muted pull-right\\\">{{info.date}}</small></div>\\r\\n                  <div> Submissions: <small class=\\\"text-muted pull-right\\\">{{info.submissions}}</small></div>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-lg-9 margin-top-20\\\">\\r\\n      <div class=\\\"ibox-content\\\">\\r\\n        <canvas id=\\\"graphCanvas\\\" width=\\\"1000\\\" height=\\\"670\\\"></canvas>\\r\\n      </div >\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/home/home.component.html\n// module id = 634\n// module chunks = 1","module.exports = \"<div id=\\\"wrapper\\\">\\r\\n      <navigation></navigation>\\r\\n      <div id=\\\"page-wrapper\\\" class=\\\"gray-bg\\\">\\r\\n        <topnavbar></topnavbar>\\r\\n        <div id=\\\"ctr\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-lg-11 ibox float-e-margins\\\">\\r\\n              <div class=\\\"ibox-content\\\">\\r\\n                <div class=\\\"row justify-content-between btnBar\\\">\\r\\n                  <div class=\\\"col\\\">\\r\\n                    <select class=\\\"form-control pull-left\\\" id=\\\"surveySelect\\\" (change)=\\\"updateSurvey($event.target.value)\\\">\\r\\n                      <option *ngFor=\\\"let s of globals.surveys\\\" [value]=\\\"s.survey_id\\\">\\r\\n                        {{ s.survey_name }}\\r\\n                      </option>\\r\\n                    </select>\\r\\n                  </div>\\r\\n                  <div class=\\\"col\\\">\\r\\n                    <button type=\\\"button\\\" class=\\\"btn btn-primary pull-right btn-sm\\\">\\r\\n                      <i class=\\\"fas fa-database\\\"></i>\\r\\n                      Add to Database\\r\\n                    </button>\\r\\n                  </div>\\r\\n                </div>\\r\\n                <hr>\\r\\n                <div class=\\\"feed-activity-list\\\">\\r\\n                  <form>\\r\\n                    <div class=\\\"row form-group\\\" *ngFor=\\\"let question of survey.questions | ActiveQuestions; let i = index \\\">\\r\\n                      <div class=\\\"col-lg-4\\\" style=\\\"margin-left:40px\\\">\\r\\n                        <span class=\\\"spanQuestion\\\"> {{ i+1 }} . <span class=\\\"spanQuestionText\\\">{{ question.question_text }}</span></span>\\r\\n                      </div>\\r\\n                      <div class=\\\"col-lg-7\\\">\\r\\n                        <div [ngSwitch]=\\\"question.question_type\\\">\\r\\n    \\r\\n                          <div *ngSwitchCase=\\\"'dropdown'\\\">\\r\\n                            <select class=\\\"form-control\\\" id=\\\"questionType\\\">\\r\\n                              <option *ngFor=\\\"let option of question.options\\\">\\r\\n                                {{ option.option_text }}\\r\\n                              </option>\\r\\n                            </select>\\r\\n                          </div>\\r\\n                          <div *ngSwitchCase=\\\"'checkboxes'\\\">\\r\\n                            <div *ngFor=\\\"let option of question.options\\\" id=\\\"divCheckboxOptionText\\\">\\r\\n                              <label class=\\\"form-check-label\\\">\\r\\n                                <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" value=\\\"option.option_text\\\">\\r\\n                                <span class=\\\"spanOption\\\">{{ option.option_text }}</span>\\r\\n                              </label>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                          <div *ngSwitchCase=\\\"'text'\\\">\\r\\n                            <label class=\\\"form-check-label\\\"></label>\\r\\n                            <textarea class=\\\"form-control\\\" id=\\\"textArea\\\" rows=\\\"3\\\"></textarea>\\r\\n                          </div>\\r\\n                          <div *ngSwitchCase=\\\"'mc'\\\">\\r\\n                            <div *ngFor=\\\"let option of question.options\\\">\\r\\n                              <label class=\\\"check-label\\\">\\r\\n                                <input type=\\\"radio\\\" class=\\\"form-check-input\\\" name=\\\"optionsRadios\\\">\\r\\n                                <span class=\\\"spanOption\\\">{{ option.option_text }}</span>\\r\\n                              </label>\\r\\n                            </div>\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                  </form>\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/input/input.component.html\n// module id = 635\n// module chunks = 1","module.exports = \"<div id=\\\"notfound\\\">\\r\\n\\t<div class=\\\"notfound\\\">\\r\\n\\t\\t<div class=\\\"notfound-bg\\\">\\r\\n\\t\\t\\t<div></div>\\r\\n\\t\\t\\t<div></div>\\r\\n\\t\\t\\t<div></div>\\r\\n\\t\\t</div>\\r\\n\\t\\t<h1>oops!</h1>\\r\\n\\t\\t<h2>Error 404 : Page Not Found</h2>\\r\\n\\t\\t<a [routerLink]=\\\"['/home']\\\">go back</a>\\r\\n\\t</div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/not-found/not-found.component.html\n// module id = 636\n// module chunks = 1","module.exports = \"<!-- Survey Landing/Home page -->\\r\\n<div class=\\\"container\\\" id=\\\"container2\\\" style=\\\"margin: 0 auto\\\"  *ngIf=\\\"!showSurveyDiv\\\">\\r\\n    <button class=\\\"btn btn-default\\\"id=\\\"loginBtn\\\" *ngIf=\\\"!auth.isAuthenticated()\\\" (click)=\\\"auth.login()\\\">\\r\\n      Login\\r\\n    </button>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-7\\\" id=\\\"bucket\\\" >\\r\\n            <div class=\\\"well well-sm\\\">\\r\\n                <legend class=\\\"text-center header\\\">Welcome to Dutchess CAP</legend>\\r\\n                <p class=\\\"text-center header3\\\">Please select the survey you would like to take:</p>\\r\\n               \\r\\n                <form class=\\\"form-horizontal\\\" method=\\\"post\\\" #start=\\\"ngForm\\\" validate>\\r\\n\\r\\n                    <select class=\\\"form-control\\\" id=\\\"select\\\" (change)=\\\"surveySelect($event, $event.target.value)\\\">\\r\\n                        <option disabled selected>-Please Select a Survey-</option>\\r\\n                        <option *ngFor=\\\"let surveyActive of surveys\\\" value=\\\"{{surveyActive.survey_id}}\\\">{{surveyActive.survey_name}}</option>\\r\\n                    </select>\\r\\n                    \\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <div class=\\\"col-md-12 text-center\\\">\\r\\n                            <button type=\\\"submit\\\" id=\\\"btn\\\" class=\\\"btn btn-primary btn-lg\\\" (click)=\\\"onStart()\\\">Start</button>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<!-- Actual survey with questions -->\\r\\n<div class=\\\"container\\\" *ngIf=\\\"showSurveyDiv\\\">\\r\\n      <div class=\\\"col-md-9\\\" id=\\\"bucket\\\">\\r\\n        <div class=\\\"well well-sm\\\">\\r\\n          <div *ngFor=\\\"let survey of surveys | filterBySurveyID: selectedSurveyId; let j = index\\\">\\r\\n            <div *ngFor=\\\"let question of survey.questions | paginate: config; let k = index\\\">\\r\\n              <form class=\\\"form-horiziontal\\\">\\r\\n                <fieldset>\\r\\n                  <legend class=\\\"text-center header\\\">{{ survey.survey_name }}</legend>\\r\\n  \\r\\n                  <div class=\\\"text-center header2\\\">\\r\\n                    <h3> {{ k+1 }}. {{ question.question_text}} </h3>\\r\\n                  </div>\\r\\n\\r\\n                  <div [ngSwitch]=\\\"question.question_type\\\" style=\\\"height:150px;\\\">\\r\\n  \\r\\n                    <div class=\\\"form-group\\\" id=\\\"dropdownStyle\\\" *ngSwitchCase=\\\"'select'\\\">\\r\\n                      <div class=\\\"col-md-6\\\" id=\\\"bucket\\\">\\r\\n                          <select class=\\\"form-control\\\" id=\\\"select\\\" [(ngModel)]=\\\"selectedOptionId\\\" name=\\\"selectedOption\\\"\\r\\n                            (change)=\\\"optionSelect($event, $event.target.value, 'select')\\\">\\r\\n                            <option disabled selected>-Please Select an Option-</option>\\r\\n                            <option *ngFor=\\\"let option of question.options\\\" value=\\\"{{option.option_id}}\\\">\\r\\n                              {{ option.option_text }}\\r\\n                            </option>\\r\\n                          </select>\\r\\n                      </div>\\r\\n                    </div>\\r\\n  \\r\\n                    <div class=\\\"form-check\\\" *ngSwitchCase=\\\"'checkbox'\\\" id=\\\"checkboxStyle\\\">\\r\\n                        <div class=\\\"col-md-6\\\" id=\\\"bucket\\\">\\r\\n                          <div *ngFor=\\\"let option of question.options\\\" class=\\\"form-check-label\\\" id=\\\"divCheckboxOptionText\\\"\\r\\n                            (change)=\\\"optionSelect($event, $event.target.value, 'checkbox')\\\">\\r\\n                            <input class=\\\"form-check-input\\\" type=\\\"checkbox\\\" value=\\\"{{option.option_id}}\\\">\\r\\n                            {{ option.option_text }}\\r\\n                          </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n  \\r\\n                    <div class=\\\"form-group\\\" *ngSwitchCase=\\\"'text'\\\" id=\\\"textStyle\\\">\\r\\n                        <div class=\\\"col-md-6\\\" id=\\\"bucket\\\">\\r\\n                          <div class=\\\"form-check-label\\\">\\r\\n                            <textarea class=\\\"form-control\\\" name=\\\"text\\\" rows=\\\"2\\\" [(ngModel)]=\\\"textAreaValue\\\"></textarea>\\r\\n                          </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n  \\r\\n                    <div class=\\\"form-group\\\" *ngSwitchCase=\\\"'radio'\\\" id=\\\"radioStyle\\\">\\r\\n                      <div class=\\\"col-md-6\\\" id=\\\"bucket\\\">\\r\\n                          <div *ngFor=\\\"let option of question.options\\\" id=\\\"radioBoxOptionText\\\" (change)=\\\"optionSelect($event, $event.target.value, 'radio')\\\">\\r\\n                            <input type=\\\"radio\\\" class=\\\"form-check-input\\\" name=\\\"question.question_id\\\" value=\\\"{{option.option_id}}\\\">\\r\\n                            {{ option.option_text }}\\r\\n                          </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n  \\r\\n                  </div>\\r\\n                  <pagination-template #p=\\\"paginationApi\\\" [id]=\\\"config.id\\\" (pageChange)=\\\"config.currentPage = $event\\\">\\r\\n                    <div class=\\\"custom-pagination\\\">\\r\\n                      <ul>\\r\\n                        <span class=\\\"pagination-previous\\\" [class.disabled]=\\\"p.isFirstPage()\\\">\\r\\n                          <button class=\\\"btn btn-primary btn-sm\\\" *ngIf=\\\"!p.isFirstPage()\\\" (click)=\\\"removeResponse(getQuestionIndex(question.question_id, p.getCurrent())); p.previous();\\\">\\r\\n                            Previous </button>\\r\\n                          </span>\\r\\n  \\r\\n                        <span *ngFor=\\\"let page of p.pages\\\" [class.current]=\\\"p.getCurrent() === page.value\\\">\\r\\n                          <li class=\\\"pageNumbers\\\" *ngIf=\\\"p.getCurrent() !== page.value\\\">\\r\\n                            <a style=\\\"font-size: 15px; color: grey\\\">{{ page.label }}</a>\\r\\n                          </li>\\r\\n                          <li class=\\\"pageNumberActive\\\" *ngIf=\\\"p.getCurrent() === page.value\\\">\\r\\n                            <a style=\\\"font-size: 15px; color: grey\\\">{{ page.label }}</a>\\r\\n                          </li>\\r\\n                        </span>\\r\\n  \\r\\n                        <span class=\\\"pagination-next\\\" [class.disabled]=\\\"p.isLastPage()\\\">\\r\\n                          <button class=\\\"btn btn-primary btn-sm\\\" *ngIf=\\\"!p.isLastPage()\\\" (click)=\\\"updateResponses(textAreaValue, getQuestionIndex(question.question_id)); p.next()\\\">\\r\\n                            Next </button>\\r\\n                          <button class=\\\"btn btn-primary btn-sm\\\" *ngIf=\\\"p.isLastPage()\\\" (click)=\\\"updateResponses(textAreaValue, getQuestionIndex(question.question_id)); postOnSubmit();\\\">\\r\\n                            Submit </button>\\r\\n                          </span>\\r\\n                      </ul>\\r\\n                    </div>\\r\\n                  </pagination-template>\\r\\n                </fieldset>\\r\\n              </form>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    \\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/pages/survey/survey.component.html\n// module id = 637\n// module chunks = 1","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class Globals {\n\n   public surveys: Array<any> = [\n      {\n         survey_id: 0,\n         survey_name: \"Lindas Survey\",\n         date_created: \"2018-02-13\",\n         questions: [\n            {\n               question_id: 0,\n               question_text: \"What is your favorite color?\",\n               question_type: \"dropdown\",\n               question_active: true,\n               options: [\n                  { option_id: 0, option_text: \"Red\", option_active: true },\n                  { option_id: 1, option_text: \"White\", option_active: true },\n                  { option_id: 2, option_text: \"Pink\", option_active: true },\n                  { option_id: 3, option_text: \"Blue\", option_active: true },\n                  { option_id: 4, option_text: \"Yellow\", option_active: false }\n               ],\n               responses: [\n                  { response_id: 0, response_text: \"Red\", date_taken: \"2018-11-02\"},\n                  { response_id: 1, response_text: \"White\", date_taken: \"2018-11-02\"},\n                  { response_id: 2, response_text: \"Pink\", date_taken: \"2018-11-02\"},\n                  { response_id: 3, response_text: \"Blue\", date_taken: \"2018-11-02\"},\n                  { response_id: 4, response_text: \"White\", date_taken: \"2018-11-02\"},\n                  { response_id: 5, response_text: \"White\", date_taken: \"2018-11-02\"},\n                  { response_id: 6, response_text: \"Yellow\", date_taken: \"2018-11-02\"},\n                  { response_id: 7, response_text: \"Blue\", date_taken: \"2018-11-02\"},\n                  { response_id: 8, response_text: \"Pink\", date_taken: \"2018-11-02\"},\n               ]\n            },\n            {\n               question_id: 1,\n               question_text: \"What is your favorite City?\",\n               question_type: \"mc\",\n               question_active: true,\n               options: [\n                  { option_id: 5, option_text: \"New York City\", option_active: true },\n                  { option_id: 6, option_text: \"Boston\", option_active: true },\n                  { option_id: 7, option_text: \"Washington\", option_active: false },\n                  { option_id: 8, option_text: \"Miami\", option_active: true },\n                  { option_id: 9, option_text: \"Poughkeepsie\", option_active: true }\n               ],\n               responses: [\n                  { response_id: 9, response_text: \"New York City\", date_taken: \"2018-11-02\"},\n                  { response_id: 10, response_text: \"Boston\", date_taken: \"2018-11-02\"},\n                  { response_id: 11, response_text: \"New York City\", date_taken: \"2018-11-02\"},\n                  { response_id: 12, response_text: \"Washington\", date_taken: \"2018-11-02\"},\n                  { response_id: 13, response_text: \"Poughkeepsie\", date_taken: \"2018-11-02\"},\n                  { response_id: 14, response_text: \"Poughkeepsie\", date_taken: \"2018-11-02\"},\n                  { response_id: 15, response_text: \"New York City\", date_taken: \"2018-11-02\"},\n                  { response_id: 16, response_text: \"Miami\", date_taken: \"2018-11-02\"},\n                  { response_id: 17, response_text: \"Boston\", date_taken: \"2018-11-02\"},\n               ]\n            },\n            {\n               question_id: 2,\n               question_text: \"Select the services that you need: \",\n               question_type: \"checkboxes\",\n               question_active: true,\n               options: [\n                  { option_id: 10, option_text: \"More Money\", option_active: false },\n                  { option_id: 11, option_text: \"More Time\", option_active: true },\n                  { option_id: 12, option_text: \"More Clothes\", option_active: true },\n                  { option_id: 13, option_text: \"Less capping work\", option_active: true },\n                  { option_id: 14, option_text: \"Less drinking\", option_active: false }\n               ],\n               responses: [\n                  { response_id: 18, response_text: \"More Time\", date_taken: \"2018-11-02\"},\n                  { response_id: 19, response_text: \"More Time\", date_taken: \"2018-11-02\"},\n                  { response_id: 20, response_text: \"More Money\", date_taken: \"2018-11-02\"},\n                  { response_id: 21, response_text: \"Less drinking\", date_taken: \"2018-11-02\"},\n                  { response_id: 22, response_text: \"Less capping work\", date_taken: \"2018-11-02\"},\n                  { response_id: 23, response_text: \"Less capping work\", date_taken: \"2018-11-02\"},\n                  { response_id: 24, response_text: \"More Money\", date_taken: \"2018-11-02\"},\n                  { response_id: 25, response_text: \"More Clothes\", date_taken: \"2018-11-02\"},\n                  { response_id: 26, response_text: \"Less capping work\", date_taken: \"2018-11-02\"},\n               ]\n            }\n         ]\n      }\n   ]\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/globals.ts","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport Auth0Lock from 'auth0-lock';\r\nimport { tokenNotExpired } from 'angular2-jwt';\r\n\r\n(window as any).global = window;\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n  // https://dutchesscapp.auth0.com/\r\n  auth0Options = {\r\n      theme: {\r\n          primaryColor: '#DFA612'\r\n      },\r\n      auth: {\r\n        redirectUrl: 'http://localhost:3000/#/home',\r\n        responseType: 'token id_token',\r\n        audience: `https://dutchesscap.auth0.com/userinfo`,\r\n        params: {\r\n          scope: 'openid profile email'\r\n        }\r\n      },\r\n      autoclose: true,\r\n      oidcConformant: true,\r\n  };\r\n    \r\n  lock = new Auth0Lock(\r\n      'Om122xNAJ4dyh43gPnuJpLfgQMZhpNFp',\r\n      'dutchesscap.auth0.com',\r\n      this.auth0Options\r\n  );\r\n\r\n  constructor(private router: Router) {\r\n    this.lock.on('authenticated', (authResult: any) => {\r\n        this.lock.getUserInfo(authResult.accessToken, (error, profile) => {\r\n            if (error) {\r\n              throw new Error(error);\r\n            }\r\n        \r\n            localStorage.setItem('token', authResult.idToken);\r\n            localStorage.setItem('profile', JSON.stringify(profile));\r\n            this.router.navigate(['/']);\r\n        });\r\n    });\r\n  }\r\n\r\n  // When called, produce the lock modal that allows authentication\r\n  login() {\r\n    this.lock.show();\r\n  }\r\n\r\n  // Remove the localStorage tokens and navigate to the survey page\r\n  logout() {\r\n    localStorage.removeItem('profile');\r\n    localStorage.removeItem('token');\r\n    this.router.navigate(['survey']);\r\n  }\r\n\r\n  // Checks if the token has expired / if it exists\r\n  isAuthenticated() {\r\n    return tokenNotExpired();\r\n  }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/authentication.service.ts"],"sourceRoot":""}